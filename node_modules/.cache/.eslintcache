[{"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/index.js":"1","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/App.js":"2","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/store/auth-context.js":"3","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/pages/HomePage.js":"4","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/pages/AuthPage.js":"5","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/Layout/Layout.js":"6","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/Profile/UserProfile.js":"7","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/ScrappedData/Details.js":"8","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/ScrappedData/EmployeeData.js":"9","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/StartingPage/StartingPageContent.js":"10","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/Profile/ProfileForm.js":"11","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/Layout/MainNavigation.js":"12","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/Auth/AuthForm.js":"13","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/store/HostUrl.js":"14","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/ScrappedData/AddData.js":"15","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/UI/Card.js":"16","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/ScrappedData/DropDownFilter.js":"17","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/ScrappedData/ExportCsv.js":"18"},{"size":352,"mtime":1632221863031,"results":"19","hashOfConfig":"20"},{"size":1192,"mtime":1636724877427,"results":"21","hashOfConfig":"20"},{"size":2298,"mtime":1637244272206,"results":"22","hashOfConfig":"20"},{"size":171,"mtime":1632221863035,"results":"23","hashOfConfig":"20"},{"size":130,"mtime":1632221863035,"results":"24","hashOfConfig":"20"},{"size":246,"mtime":1632221863031,"results":"25","hashOfConfig":"20"},{"size":245,"mtime":1634736243102,"results":"26","hashOfConfig":"20"},{"size":185,"mtime":1636708531458,"results":"27","hashOfConfig":"20"},{"size":8371,"mtime":1637259888782,"results":"28","hashOfConfig":"20"},{"size":231,"mtime":1632484514506,"results":"29","hashOfConfig":"20"},{"size":3074,"mtime":1637304703827,"results":"30","hashOfConfig":"20"},{"size":2162,"mtime":1634722160320,"results":"31","hashOfConfig":"20"},{"size":4686,"mtime":1637151568702,"results":"32","hashOfConfig":"20"},{"size":110,"mtime":1637560205483,"results":"33","hashOfConfig":"20"},{"size":16140,"mtime":1637393171996,"results":"34","hashOfConfig":"20"},{"size":152,"mtime":1632549456718,"results":"35","hashOfConfig":"20"},{"size":11346,"mtime":1637559376725,"results":"36","hashOfConfig":"20"},{"size":704,"mtime":1637561247364,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"lncne1",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/index.js",[],["78","79"],"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/App.js",[],"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/store/auth-context.js",[],"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/pages/HomePage.js",[],"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/pages/AuthPage.js",[],"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/Layout/Layout.js",[],"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/Profile/UserProfile.js",[],"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/ScrappedData/Details.js",[],"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/ScrappedData/EmployeeData.js",[],"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/StartingPage/StartingPageContent.js",[],"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/Profile/ProfileForm.js",["80","81","82","83","84","85","86","87"],"// import { useRef, useContext } from 'react';\nimport { useRef } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport React, { useState, useEffect } from 'react';\n\n// import AuthContext from '../../store/auth-context';\nimport classes from './ProfileForm.module.css';\nimport { ngrokUrl } from '../../store/HostUrl';\nimport PasswordField from 'material-ui-password-field'\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { TextField, InputAdornment, IconButton } from \"@material-ui/core\";\nimport Visibility from \"@material-ui/icons/Visibility\";\n\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEye } from \"@fortawesome/free-solid-svg-icons\";\nconst eye = <FontAwesomeIcon icon={faEye} />;\n\n\n\nconst ProfileForm = () => {\n  const history = useHistory();\n\n  const newPasswordInputRef = useRef();\n  // const authCtx = useContext(AuthContext);\n  const submitHandler = (event) => {\n\n    event.preventDefault();\n    const enteredNewPassword = newPasswordInputRef.current.value;\n    const password = { update_password: enteredNewPassword };\n    const headers = {\n      'X-USER-TOKEN': localStorage.getItem('token'),\n      \"X-USER-EMAIL\":localStorage.getItem('email')\n    };\n    const axios = require('axios').default;\n    axios.put(`${ngrokUrl}/api/v1/change_password`, password, { headers })\n    .then((responseData) => { console.log(responseData);\n        toast.success(\"Password updated successfully\",  {\n          position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n          onClose: () => history.replace('/')\n        });\n    })\n    .catch((error) => { console.log(error); alert('Something Went Wrong') })\n  };\n\n\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleClick = () => {\n    setShowPassword(!showPassword);\n  }\n\n\n  const [passwordShown, setPasswordShown] = useState(false);\n  const togglePasswordVisiblity = () => {\n    setPasswordShown(passwordShown ? false : true);\n  };\n\n\n  return (<>\n    <form className={classes.form} onSubmit={submitHandler}>\n      <div className={classes.control}>\n        <label htmlFor='new-password'>New Password</label>\n        <input type={passwordShown ? \"text\" : \"password\"} id='new-password' minLength=\"7\" required ref={newPasswordInputRef}\n        />\n        <i onClick={togglePasswordVisiblity}>{eye}</i>\n      </div>\n\n      {/* <PasswordField id='new-password' minLength=\"7\" required ref={newPasswordInputRef}  /> */}\n\n      <div className={classes.action}>\n        <button>Change Password</button>\n      </div>\n      <ToastContainer position=\"top-right\"\n        autoClose={5000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover/>\n    </form>\n    </>\n  );\n};\n\nexport default ProfileForm;\n","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/Layout/MainNavigation.js",[],"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/Auth/AuthForm.js",[],"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/store/HostUrl.js",[],"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/ScrappedData/AddData.js",["88","89","90"],"\nimport { useTable, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import { useEffect, useCallback } from 'react';\nimport React, { useState, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@mui/material/Grid';\nimport Box from '@material-ui/core/Box';\nimport Input from '@mui/material/Input';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { useHistory } from \"react-router-dom\";\nimport DatePicker from '@mui/lab/DatePicker';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport TextField from '@mui/material/TextField';\nimport { ngrokUrl } from '../../store/HostUrl';\nimport Select from 'react-select'\n\nconst ariaLabel = { 'aria-label': 'description' };\n\n// Define a default UI for filtering\nfunction GlobalFilter({\n    preGlobalFilteredRows,\n    globalFilter,\n    setGlobalFilter,\n}) {\n    const count = preGlobalFilteredRows.length\n    const [value, setValue] = React.useState(globalFilter)\n    const onChange = useAsyncDebounce(value => {\n        setGlobalFilter(value || undefined)\n    }, 200)\n\n    return (\n        <span style={{marginLeft:\"13px\"}}>\n            Search:{' '}\n            <input\n            style={{width:\"17%\", marginLeft:\"12px\"}}\n                className=\"form-control\"\n                value={value || \"\"}\n                onChange={e => {\n                    setValue(e.target.value);\n                    onChange(e.target.value);\n                }}\n                placeholder={`${count} records...`}\n            />\n        </span>\n    )\n}\n\nfunction DefaultColumnFilter({\n    column: { filterValue, preFilteredRows, setFilter },\n}) {\n    const count = preFilteredRows.length\n\n    return (\n        <input\n            className=\"form-control\"\n            value={filterValue || ''}\n            onChange={e => {\n                setFilter(e.target.value || undefined)\n            }}\n            placeholder={`Search ${count} records...`}\n        />\n    )\n}\n\nfunction Table({ columns, data }) {\n\n    const defaultColumn = React.useMemo(\n        () => ({\n            // Default Filter UI\n            Filter: DefaultColumnFilter,\n        }),\n        []\n    )\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n        state,\n        preGlobalFilteredRows,\n        setGlobalFilter,\n    } = useTable(\n        {\n            columns,\n            data,\n            defaultColumn,\n        },\n        useFilters,\n        useGlobalFilter\n    )\n\n    return (\n        <div style={{marginTop:\"67px\"}}>\n            <GlobalFilter\n                preGlobalFilteredRows={preGlobalFilteredRows}\n                globalFilter={state.globalFilter}\n                setGlobalFilter={setGlobalFilter}\n            />\n            <table style={{marginTop:\"19px\"}} className=\"table\" {...getTableProps()}>\n                <thead>\n                    {headerGroups.map(headerGroup => (\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map(column => (\n                                <th {...column.getHeaderProps()}>\n                                    {column.render('Header')}\n                                    {/* Render the columns filter UI */}\n                                    <div>{column.canFilter ? column.render('Filter') : null}</div>\n                                </th>\n                            ))}\n                        </tr>\n                    ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                    {rows.map((row, i) => {\n                        prepareRow(row)\n                        return (\n                            <tr {...row.getRowProps()}>\n                                {row.cells.map(cell => {\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                })}\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </table>\n            <br />\n          </div>\n    )\n}\n\nfunction FilterTableComponent() {\n  const [resyncing, setResyncing] = useState(false);\n    const columns = React.useMemo(\n        () => [\n                    {\n                        Header: 'Name',\n                        accessor: 'name',\n                    },\n                    {\n                        Header: 'Type',\n                        accessor: 'company_type'\n                    },\n                   {\n                        Header: 'Url',\n                        accessor: 'url'\n                    },\n                    {\n                        Header: 'Foundation Year',\n                        accessor: 'foundation_year'\n                    },\n                    {\n                        filterable: false,\n                        Header: 'Details',\n                        accessor: 'link',\n                        disableFilters:true,\n                        Cell: ({ row }) =>\n                        <Button variant='outlined'\n                        style={{width:\"146px\"}}\n                        type='submit' sx = {{mt:20}}\n                        name= {row.original.id} onClick={ () => fetchCompanyDetail(row.original.id)}\n                      > Fetch Details</Button>\n                    },\n\n                    {\n                      filterable: false,\n                      disableFilters:true,\n                      Header: 'Sync',\n                      accessor: 'link2',\n                      Cell: ({ row }) =>\n                      <Button variant='outlined'\n                        type='submit' sx = {{mt:20}}\n                        disabled = {resyncing? true:false}\n                        name= {row.original.id}\n                        onClick={ () => resyncCompanyDetail(row.original.id)\n                      }\n                      >\n                        {resyncing ? \"Resyncing\" : \"Resync\"}\n                        {/* Resync */}\n                        </Button>\n                  },\n                  {\n                    filterable: false,\n                    disableFilters:true,\n                    Header: 'Delete',\n                    accessor: 'link3',\n                    Cell: ({ row }) =>\n                    <Button variant='outlined'\n                    type='submit' sx = {{mt:20}}\n                    name= {row.original.id} onClick={ () => destroyCompanyDetail(row.original.id)}\n                  > Destroy</Button>\n                },\n        ],\n        []\n    )\n\n    // const [isFetched, setIsFetched] = useState(false);\n    const [url, setUrl] = useState('');\n    const [userData, setUserData] = useState([]);\n    const [name, setName] = useState('');\n    const [type, setType] = useState('');\n    const [count, setCount] = useState(0);\n\n    const [value, setValue] = useState(new Date());\n\n    const destroyCompanyDetail = (id) => {\n      const axios = require('axios').default;\n\n      axios.delete(`${ngrokUrl}/api/v1/companies/${id}`, {\n        headers:{\n          'X-USER-TOKEN': localStorage.getItem('token'),\n          \"X-USER-EMAIL\":localStorage.getItem('email')\n        },\n      }).then(function(response){\n        if (response.data.success === true){\n          setCount(count+1);\n          toast.success(\"Delete Sucess\",{\n            position: \"top-right\",\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n          })\n          // const axios = require('axios').default;\n          axios.get(`${ngrokUrl}/api/v1/companies`, {\n            headers:{\n              'X-USER-TOKEN': localStorage.getItem('token'),\n              \"X-USER-EMAIL\":localStorage.getItem('email')\n            }\n          }).then(function(response){\n            if (response.data.success === true){\n              setUserData(response.data.companies);\n            }\n            else{\n          toast.error(response.data.message,  {\n            position: \"top-right\",\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n          });\n            }\n          })\n        }\n        else{\n      toast.error(response.data.message,  {\n        position: \"top-right\",\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      });\n        }\n      })\n    }\n\n    useEffect(() => {\n      const axios = require('axios').default;\n      axios.get(`${ngrokUrl}/api/v1/companies`, {\n        headers:{\n          'X-USER-TOKEN': localStorage.getItem('token'),\n          \"X-USER-EMAIL\":localStorage.getItem('email')\n        }\n      }).then(function(response){\n        if (response.data.success === true){\n          setUserData(response.data.companies);\n        }\n        else{\n      toast.error(response.data.message,  {\n        position: \"top-right\",\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      });\n        }\n      })\n  },[count]);\n\n  const [error, setError] = useState(false);\n\n    const switchDetailModeHandler = (event) => {\n      // let sent_url;\n      event.preventDefault();\n      if (value.getFullYear().toString().length < 4)\n      {\n        setError(true)\n      }\n      else\n      {\n        const axios = require('axios').default;\n        setError(false)\n          const headers = {\n            'X-USER-TOKEN': localStorage.getItem('token'),\n            \"X-USER-EMAIL\":localStorage.getItem('email')\n          }\n\n          const data = {\n            name:name,\n            company_type:type,\n            url:url,\n            foundation_year:value\n          }\n\n          axios.post(`${ngrokUrl}/api/v1/companies`,data, {\n              headers: headers\n            }).then(response => {\n            // setIsLoading(false);\n            console.log(\"String\");\n            console.log(response);\n            if (response.data.success === false)\n            {\n              toast.error(response.data.message,  {\n                position: \"top-right\",\n              autoClose: 5000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n              });\n            //   setFilterCall(false);\n            //   // alert(response.data.message)\n            }\n            else{\n              axios.get(`${ngrokUrl}/api/v1/companies`, {\n                headers: headers\n              }\n              )\n              .then(function(response){\n                if (response.data.success === true){\n                  setUserData(response.data.companies);\n                }\n              })\n\n            // userData.push(response.data.company)\n            // setIsFetched(true);\n            // setFilterCall(false);\n            // setIsFiltered(false);\n            // setShowDetails(true);\n          }\n            // setError(false);\n          }).catch(function (error) {\n            console.log(error);\n            toast.error(\"Something Went Wrong\",  {\n              position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n            })\n          })\n\n        }\n\n\n    };\n\n    const history = useHistory();\n    const fetchCompanyDetail =(id) =>{\n      console.log(id)\n      history.push(`/details/${id}`)\n    }\n\n\n    const resyncCompanyDetail = (id) => {\n\n      setResyncing(true);\n\n      toast.success(\"Resync in progress\",  {\n        position: \"top-right\",\n      autoClose: 10000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      })\n\n      console.log(`before 1st Resync = ${resyncing}`)\n\n      const axios = require('axios').default;\n\n      axios.get(`${ngrokUrl}/api/v1/resync?company_id=${id}`, {\n        headers:{\n          'X-USER-TOKEN': localStorage.getItem('token'),\n          \"X-USER-EMAIL\":localStorage.getItem('email')\n        },\n      }).then(function(response){\n\n        if (response.data.success === true){\n\n\n          console.log(`after 1st Resync = ${resyncing}`)\n            setResyncing(false);\n\n            console.log(`After Resync Success = ${resyncing}`)\n            toast.success(\"Resync Sucess\",{\n              position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n              })\n          }\n          else{\n            setResyncing(false);\n            console.log(`After Resync not success = ${resyncing}`)\n            toast.error(response.data.message,  {\n          position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        });\n          }\n        })\n\n    }\n\n    const options = [\n      { value: 'Product Based', label: 'ProductBased' },\n      { value: 'Service Based', label: 'ServiceBased' }\n    ]\n\n    return (\n      <section>\n      <Grid container spacing={0} direction=\"column\" alignItems=\"center\" justifyContent=\"center\">\n\n          <form alignItems=\"center\" onSubmit={switchDetailModeHandler} >\n            <div >\n              <Input placeholder=\"Company Name *\" inputProps={ariaLabel} onChange={e => setName(e.target.value)} required style={{width:\"500px\"}}  />\n            </div>\n            <div >\n              <Input placeholder=\"Company Url *\" inputProps={ariaLabel} required onChange={e => setUrl(e.target.value)}   style={{width:\"500px\", marginTop:\"10px\"}}  />\n            </div>\n            <div >\n\n              <Input placeholder=\"Company Type\" inputProps={ariaLabel} required onChange={e => setType(e.target.value)}  style={{width:\"500px\", marginTop:\"10px\"}}  />\n\n            {/* <Select placeholder = \"Company Type\" options={options}  required onChange={e => setType(e.target.value)} /> */}\n\n            </div>\n\n          <div style = {{marginLeft:\"-17px\"}}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <Box m={2} >\n                <DatePicker\n                  inputFormat=\"yyyy\"\n                  views={['year']}\n                  label=\"Foundation Year\"\n                  minDate={new Date('1900-03-01')}\n                  maxDate={new Date('2023-06-01')}\n                  value={value}\n                  onChange={setValue}\n                  renderInput={(params) => <TextField style={{width:\"500px\"}} {...params} helperText={null} />}\n                />\n                {error && (<p>InValid Year</p>) }\n              </Box>\n            </LocalizationProvider>\n          </div>\n\n            <Grid container spacing={2}>\n              <Grid item>\n                <Box pt={2}>\n                  <Button variant='outlined'\n                      type='submit' sx = {{mt:20}} style = {{width:'217px', position:'absolute', left:'42%'}}\n                      name=\"Fetch\"\n                    >\n                      {/* {showDetails ? 'Hide Details' : 'Fetch Detais'} */}\n                      Add\n                    </Button>\n                </Box>\n              </Grid>\n\n            </Grid>\n          </form>\n          </Grid>\n          <ToastContainer position=\"top-right\"\n          autoClose={5000}\n          hideProgressBar={false}\n          newestOnTop={false}\n          closeOnClick\n          rtl={false}\n          pauseOnFocusLoss\n          draggable\n          pauseOnHover/>\n        {< Table columns={columns} data={userData} />}\n      </section>\n    )\n}\n\nexport default FilterTableComponent;","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/UI/Card.js",[],"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/ScrappedData/DropDownFilter.js",["91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106"],"import SearchIcon from '@mui/icons-material/Search';\nimport { useState } from 'react';\nimport InputBase from '@mui/material/InputBase';\nimport { styled, alpha } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport Button from '@mui/material/Button';\nimport { FormControl, InputLabel, Select, MenuItem } from '@mui/material';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Country, State, City } from 'country-state-city';\nimport Csv from './ExportCsv'\n\n// import { company_name } from './AddData';\nlet company_name = \"\"\nconst Search = styled('div')(({ theme }) => ({\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.common.white, 0.25),\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n        marginLeft: theme.spacing(3),\n        width: 'auto',\n    },\n}));\n\nconst Item = styled(Paper)(({ theme }) => ({\n    ...theme.typography.body2,\n    padding: theme.spacing(0),\n    color: theme.palette.text.secondary,\n}));\n\n\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n}));\n\n\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\n    color: 'inherit',\n    '& .MuiInputBase-input': {\n        padding: theme.spacing(1, 1, 1, 0),\n        paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('md')]: {\n            width: '12ch',\n        },\n    },\n}));\n\nexport let dataFiltered = null;\n\nexport default function DropDownFilter(props) {\n\n    //   const [firstName, setUserFirstName] = useState();\n    //   const[filteredCompany, setFilteredCompany] = useState();\n    //   const[filterCall, setFilterCall] = useState(false);\n\n    const [company, setCompany] = useState('');\n    const [designation, setDesignation] = useState('')\n    const [state, setState] = useState('')\n    const [country, setCountry] = useState('')\n    const [selectedCountry, setSelectedCountry] = useState('')\n    const [city, setCity] = useState('')\n\n\n\n    let countryData = Country.getAllCountries()\n\n    let selectedCountryStates = State.getStatesOfCountry(country)\n    let selectedCity = City.getCitiesOfState(country, state)\n    console.log(selectedCity)\n\n\n\nlet countryMatcher = (iso)=>{\n    let countryCodesMatcher = countryData.filter(item=> item.isoCode == iso)\n        return countryCodesMatcher[0][\"name\"]\n\n}\n\n\nlet stateMatcher = (iso)=>{\n    let stateCodesMatcher = selectedCountryStates.filter(item=>item.isoCode ==iso)\n         return stateCodesMatcher[0][\"name\"]\n}\n\n\n\nlet FilterHandler = ()=>{\n    let catchedCountry = '';\n    let catchedState=''\n if(country  && country !== \"\"){\n   catchedCountry = countryMatcher(country)}\n if(state && state!==\"\"){\n    catchedState= stateMatcher(state)}\n\n\n    let EmployeeDetails = props.userData.employee_details\n    let FoundersDetails = props.userData.founders_details\n\n    let filterFinalEmployees =  []\n    let filterFinalFounders =  FoundersDetails.filter(employ=> employ.city.includes(catchedCountry) && employ.city.includes(catchedState) &&employ[\"city\"].includes(city)&&employ.designation.includes(designation) )\n\n    if(designation !==\"Employees\"){\n\n        filterFinalEmployees= EmployeeDetails.filter(employ=> employ.city.includes(catchedCountry) && employ.city.includes(catchedState) &&employ[\"city\"].includes(city)&&employ.designation.includes(designation) )\n\n    }else{\n        filterFinalEmployees= EmployeeDetails.filter(employ=> employ.city.includes(catchedCountry) && employ.city.includes(catchedState) &&employ[\"city\"].includes(city) )\n    }\n\n\n    props.filteredData(filterFinalFounders,filterFinalEmployees)\n    console.log(designation)\n\n\n}\n\n\n    const handleChange = (event) => {\n        console.log(event.target.name, \"harish\")\n        if (event.target.name == \"Company\") {\n            setCompany(event.target.value);\n\n        } else if (event.target.name == \"Designation\") {\n            setDesignation(event.target.value)\n        } else if (event.target.name == \"State\") {\n            setState(event.target.value)\n            setCity(\"\")\n\n        } else if (event.target.name == \"Country\") {\n            setCountry(event.target.value)\n            setState(\"\")\n            setCity(\"\")\n\n        } else if (event.target.name == \"City\") {\n            setCity(event.target.value)\n        }\n\n    };\n\n\n\n\n\n//  let extractedLocations = EmployeeDataLocation.map(employee =>{\n//    let splitLocation =  employee.city.split(\",\")\n\n//      let EmployeeCity = splitLocation[0]\n//      let EmployeeState = splitLocation[1]\n//      let EmployeeCountry = splitLocation[2]\n\n//      console.log(EmployeeCity,EmployeeState)\n\n\n//  })\n\n    //   const handleDesignationChange = (event) => {\n    //     setDesignation(event.target.value);\n    //   };\n\n    //   const handleStateCompanyChange = (event) => {\n    //     setState(event.target.value);\n    //   };\n\n    //   const handlecountryCompanyChange = (event) => {\n    //     setCountry(event.target.value);\n    //   };\n\n\n    //   const firstNameChangeHandler = (event) => {\n    //     setUserFirstName(event.target.value);\n    //   };\n\n    //   const [lastName, setUserLastName] = useState();\n\n    //   const lastNameChangeHandler = (event) => {\n    //     setUserLastName(event.target.value);\n    //   };\n\n    //   const [email, setUserEmail] = useState();\n\n    //   const emailChangeHandler = (event) => {\n    //     setUserEmail(event.target.value);\n    //   };\n\n    //   const [city, setUserCity] = useState();\n\n    //   const cityChangeHandler = (event) => {\n    //     setUserCity(event.target.value);\n    //   };\n\n    //   const [designation, setUserDesignation] = useState();\n\n    //   const designationChangeHandler = (event) => {\n    //     setUserDesignation(event.target.value);\n    //   };\n\n\n\n\n\n    return (<>\n\n        <Grid container spacing={2}>\n\n\n\n            <Grid item xs={6}>\n                <Item>\n                    <FormControl fullWidth>\n                        <InputLabel id=\"Country\">Country</InputLabel>\n                        <Select\n                            labelId=\"Country\"\n                            id=\"demo-Country\"\n                            value={country}\n                            label=\"country\"\n                            name=\"Country\"\n                            onChange={handleChange}\n                        >\n                            <MenuItem value={\"\"} > Select</MenuItem>\n                            {countryData.map(count => {\n                                // console.log(count.isoCode)\n\n\n                                return   <MenuItem value={count.isoCode}>{count.name}</MenuItem>\n\n                            })}\n\n                        </Select>\n                    </FormControl>\n                </Item>\n            </Grid>\n\n            <Grid item xs={6}>\n                <Item>\n                    <FormControl fullWidth>\n                        <InputLabel id=\"State\">State</InputLabel>\n                        <Select\n                            labelId=\"State\"\n                            id=\"demo-state\"\n                            value={state}\n                            label=\"state\"\n                            name=\"State\"\n                            onChange={handleChange}\n                        >\n                             <MenuItem value={\"\"}  > Select</MenuItem>\n                            {selectedCountryStates.map(IndivState => {\n                                // console.log(IndivState.isoCode)\n\n\n\n                                return <MenuItem value={IndivState.isoCode}>{IndivState.name}</MenuItem>\n\n\n                            })}\n                        </Select>\n                    </FormControl>\n                </Item>\n            </Grid>\n\n            <Grid item xs={6}>\n                <Item>\n                    <FormControl fullWidth>\n                        <InputLabel id=\"City\">City</InputLabel>\n                        <Select\n                            labelId=\"City\"\n                            id=\"demo-City\"\n                            value={city}\n                            label=\"City\"\n                            name=\"City\"\n                            onChange={handleChange}\n                        >\n                            <MenuItem value={\"\"} > Select</MenuItem>\n                            {selectedCity.map(cities => {\n\n\n\n                                    return     <MenuItem value={cities.name}>{cities.name}</MenuItem>\n\n\n                            })}\n\n                        </Select>\n                    </FormControl>\n                </Item>\n            </Grid>\n\n            <Grid item xs={6}>\n                <Item>\n                    <FormControl fullWidth>\n                        <InputLabel id=\"Designation\">Designation</InputLabel>\n                        <Select\n                            labelId=\"Designation\"\n                            id=\"demo-designation\"\n                            value={designation}\n                            label=\"Designation\"\n                            name=\"Designation\"\n                            onChange={handleChange}\n                            placeHolder = \"Select\"\n                        >\n                            <MenuItem value={\"\"}  > Select</MenuItem>\n                            <MenuItem value={\"Chief Executive Officer\"}>CEO</MenuItem>\n                            <MenuItem value={\"Founder \"}>Founder</MenuItem>\n                            <MenuItem value={\"CTO\"}>CTO</MenuItem>\n                            <MenuItem value={\"COO\"}>COO</MenuItem>\n                            <MenuItem value={\"CXO\"}>CXO</MenuItem>\n                            <MenuItem value={\"Employees\"}>Employees</MenuItem>\n\n                            {/* <MenuItem value={\"Software Engineer\"}>Software Engineer</MenuItem>\n                            <MenuItem value={\"Developer\"}>Developer</MenuItem>\n                            <MenuItem value={\"Business Development\"}>Business Development</MenuItem> */}\n                            <MenuItem value={\"Human Resources\"}>Human Resources</MenuItem>\n                            {/* <MenuItem value={\"Designer\"}>Designer</MenuItem> */}\n\n\n\n\n\n                        </Select>\n                    </FormControl>\n                </Item>\n            </Grid>\n        </Grid>\n\n        <Grid item mt={2} container spacing={0} direction=\"column\" alignItems=\"center\" justifyContent=\"center\" >\n            <Button variant=\"contained\"   onClick={FilterHandler } style={{ width: '240px' }}>Filter</Button>\n        </Grid>\n        <Grid item mt={2} spacing={0} direction=\"column\" alignItems=\"center\" justifyContent=\"center\"><Csv/></Grid>\n        <ToastContainer position=\"top-right\"\n            autoClose={5000}\n            hideProgressBar={false}\n            newestOnTop={false}\n            closeOnClick\n            rtl={false}\n            pauseOnFocusLoss\n            draggable\n            pauseOnHover />\n\n    </>\n    )\n}","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/ScrappedData/ExportCsv.js",[],{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":4,"column":27,"nodeType":"113","messageId":"114","endLine":4,"endColumn":36},{"ruleId":"111","severity":1,"message":"115","line":9,"column":8,"nodeType":"113","messageId":"114","endLine":9,"endColumn":21},{"ruleId":"111","severity":1,"message":"116","line":13,"column":10,"nodeType":"113","messageId":"114","endLine":13,"endColumn":19},{"ruleId":"111","severity":1,"message":"117","line":13,"column":21,"nodeType":"113","messageId":"114","endLine":13,"endColumn":35},{"ruleId":"111","severity":1,"message":"118","line":13,"column":37,"nodeType":"113","messageId":"114","endLine":13,"endColumn":47},{"ruleId":"111","severity":1,"message":"119","line":14,"column":8,"nodeType":"113","messageId":"114","endLine":14,"endColumn":18},{"ruleId":"111","severity":1,"message":"120","line":16,"column":8,"nodeType":"113","messageId":"114","endLine":16,"endColumn":21},{"ruleId":"111","severity":1,"message":"121","line":58,"column":9,"nodeType":"113","messageId":"114","endLine":58,"endColumn":20},{"ruleId":"111","severity":1,"message":"122","line":19,"column":8,"nodeType":"113","messageId":"114","endLine":19,"endColumn":14},{"ruleId":"123","severity":1,"message":"124","line":198,"column":9,"nodeType":"125","endLine":198,"endColumn":11,"suggestions":"126"},{"ruleId":"111","severity":1,"message":"127","line":438,"column":11,"nodeType":"113","messageId":"114","endLine":438,"endColumn":18},{"ruleId":"111","severity":1,"message":"128","line":1,"column":8,"nodeType":"113","messageId":"114","endLine":1,"endColumn":18},{"ruleId":"111","severity":1,"message":"129","line":10,"column":26,"nodeType":"113","messageId":"114","endLine":10,"endColumn":31},{"ruleId":"111","severity":1,"message":"130","line":16,"column":5,"nodeType":"113","messageId":"114","endLine":16,"endColumn":17},{"ruleId":"111","severity":1,"message":"131","line":17,"column":7,"nodeType":"113","messageId":"114","endLine":17,"endColumn":13},{"ruleId":"111","severity":1,"message":"132","line":40,"column":7,"nodeType":"113","messageId":"114","endLine":40,"endColumn":24},{"ruleId":"111","severity":1,"message":"133","line":51,"column":7,"nodeType":"113","messageId":"114","endLine":51,"endColumn":22},{"ruleId":"111","severity":1,"message":"134","line":72,"column":12,"nodeType":"113","messageId":"114","endLine":72,"endColumn":19},{"ruleId":"111","severity":1,"message":"135","line":76,"column":12,"nodeType":"113","messageId":"114","endLine":76,"endColumn":27},{"ruleId":"111","severity":1,"message":"136","line":76,"column":29,"nodeType":"113","messageId":"114","endLine":76,"endColumn":47},{"ruleId":"137","severity":1,"message":"138","line":90,"column":70,"nodeType":"139","messageId":"140","endLine":90,"endColumn":72},{"ruleId":"137","severity":1,"message":"138","line":97,"column":77,"nodeType":"139","messageId":"140","endLine":97,"endColumn":79},{"ruleId":"137","severity":1,"message":"138","line":136,"column":31,"nodeType":"139","messageId":"140","endLine":136,"endColumn":33},{"ruleId":"137","severity":1,"message":"138","line":139,"column":38,"nodeType":"139","messageId":"140","endLine":139,"endColumn":40},{"ruleId":"137","severity":1,"message":"138","line":141,"column":38,"nodeType":"139","messageId":"140","endLine":141,"endColumn":40},{"ruleId":"137","severity":1,"message":"138","line":145,"column":38,"nodeType":"139","messageId":"140","endLine":145,"endColumn":40},{"ruleId":"137","severity":1,"message":"138","line":150,"column":38,"nodeType":"139","messageId":"140","endLine":150,"endColumn":40},"no-native-reassign",["141"],"no-negated-in-lhs",["142"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'PasswordField' is defined but never used.","'TextField' is defined but never used.","'InputAdornment' is defined but never used.","'IconButton' is defined but never used.","'Visibility' is defined but never used.","'VisibilityOff' is defined but never used.","'handleClick' is assigned a value but never used.","'Select' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useMemo has missing dependencies: 'destroyCompanyDetail', 'fetchCompanyDetail', 'resyncCompanyDetail', and 'resyncing'. Either include them or remove the dependency array.","ArrayExpression",["143"],"'options' is assigned a value but never used.","'SearchIcon' is defined but never used.","'toast' is defined but never used.","'company_name' is assigned a value but never used.","'Search' is assigned a value but never used.","'SearchIconWrapper' is assigned a value but never used.","'StyledInputBase' is assigned a value but never used.","'company' is assigned a value but never used.","'selectedCountry' is assigned a value but never used.","'setSelectedCountry' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"144","fix":"145"},"Update the dependencies array to be: [destroyCompanyDetail, fetchCompanyDetail, resyncCompanyDetail, resyncing]",{"range":"146","text":"147"},[6745,6747],"[destroyCompanyDetail, fetchCompanyDetail, resyncCompanyDetail, resyncing]"]