{"ast":null,"code":"var _jsxFileName = \"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/Auth/AuthForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport AuthContext from '../../store/auth-context';\nimport classes from './AuthForm.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AuthForm = () => {\n  _s();\n\n  const history = useHistory();\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n  const authCtx = useContext(AuthContext);\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [message, setMessage] = useState();\n\n  const switchAuthModeHandler = () => {\n    setIsLogin(prevState => !prevState);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value; // if (enteredPassword.length < 5) {\n    //   alert('Password must contain atleast 5 characters');\n    //   return;\n    // }\n\n    setIsLoading(true);\n    let url;\n\n    if (isLogin) {\n      // url ='https://react-fetch-detail.herokuapp.com/users/sign_in';\n      // url=\"http://localhost:4000/api/v1/auth/sign_in\"\n      url = 'http://localhost:4000/api/v1/users/sign_in';\n    } else {\n      // url ='https://react-fetch-detail.herokuapp.com/users';\n      // url=\"http://localhost:4000/api/v1/auth\"\n      url = 'http://localhost:4000/api/v1/users';\n    } // if (url === \"https://react-fetch-detail.herokuapp.com/users\")\n\n\n    if (url === \"http://localhost:4000/api/v1/users\") // if (url === \"http://localhost:4000/api/v1/auth\")\n      {\n        fetch(url, {\n          method: 'POST',\n          body: JSON.stringify({\n            user: {\n              email: enteredEmail,\n              password: enteredPassword,\n              password_confirmation: enteredPassword\n            }\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }).then(res => {\n          setIsLoading(false);\n\n          if (res.ok) {\n            return res.json();\n          } else {\n            return res.json().then(data => {\n              let errorMessage = data.message;\n              throw new Error(errorMessage);\n            });\n          }\n        }).catch(err => {\n          alert(err.message);\n          setIsLogin(true);\n          history.replace('/auth');\n        });\n      } else {\n      fetch(url, {\n        method: 'POST',\n        body: JSON.stringify({\n          user: {\n            email: enteredEmail,\n            password: enteredPassword,\n            returnSecureToken: true\n          }\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(res => {\n        setIsLoading(false);\n\n        if (res.ok) {\n          return res.json();\n        } else {\n          return res.json().then(data => {\n            let errorMessage = data.message;\n            throw new Error(errorMessage);\n          });\n        }\n      }).then(data => {\n        const expirationTime = new Date(new Date().getTime() + 365 * 3000);\n        authCtx.login(data.user.auth_token, data.user.email, expirationTime.toISOString());\n        history.replace('/');\n      }).catch(err => {\n        setError(true);\n        setMessage(err.message); // alert(err.message);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.auth,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: isLogin ? 'Login' : 'Sign Up'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          style: {\n            float: 'left'\n          },\n          children: \"Your Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          required: true,\n          ref: emailInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          style: {\n            float: 'left'\n          },\n          children: \"Your Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          required: true,\n          ref: passwordInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: [!isLoading &&\n        /*#__PURE__*/\n        // <button>{isLogin ? 'Login' : 'Create Account'}</button>\n        _jsxDEV(\"button\", {\n          children: isLogin ? 'Login' : 'Create Account'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Sending request...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: classes.toggle,\n          onClick: switchAuthModeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        color: 'red'\n      },\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthForm, \"O7h93tZb4Xc3PwypTpqrBw3vGKs=\", false, function () {\n  return [useHistory];\n});\n\n_c = AuthForm;\nexport default AuthForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthForm\");","map":{"version":3,"sources":["/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/Auth/AuthForm.js"],"names":["useState","useRef","useContext","useHistory","AuthContext","classes","AuthForm","history","emailInputRef","passwordInputRef","authCtx","isLogin","setIsLogin","isLoading","setIsLoading","error","setError","message","setMessage","switchAuthModeHandler","prevState","submitHandler","event","preventDefault","enteredEmail","current","value","enteredPassword","url","fetch","method","body","JSON","stringify","user","email","password","password_confirmation","headers","then","res","ok","json","data","errorMessage","Error","catch","err","alert","replace","returnSecureToken","expirationTime","Date","getTime","login","auth_token","toISOString","auth","control","float","actions","toggle","color"],"mappings":"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","sourcesContent":["import { useState, useRef, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport AuthContext from '../../store/auth-context';\nimport classes from './AuthForm.module.css';\n\nconst AuthForm = () => {\n  const history = useHistory();\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n\n  const authCtx = useContext(AuthContext);\n\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n\n  const [error, setError] = useState(false);\n  const[message, setMessage] = useState();\n\n  const switchAuthModeHandler = () => {\n    setIsLogin((prevState) => !prevState);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value;\n\n    // if (enteredPassword.length < 5) {\n    //   alert('Password must contain atleast 5 characters');\n    //   return;\n    // }\n\n    setIsLoading(true);\n    let url;\n\n    if (isLogin) {\n      // url ='https://react-fetch-detail.herokuapp.com/users/sign_in';\n        // url=\"http://localhost:4000/api/v1/auth/sign_in\"\n        url = 'http://localhost:4000/api/v1/users/sign_in'\n      } else {\n        // url ='https://react-fetch-detail.herokuapp.com/users';\n        // url=\"http://localhost:4000/api/v1/auth\"\n      url = 'http://localhost:4000/api/v1/users'\n    }\n    // if (url === \"https://react-fetch-detail.herokuapp.com/users\")\n    if (url === \"http://localhost:4000/api/v1/users\")\n    // if (url === \"http://localhost:4000/api/v1/auth\")\n\n    {\n      fetch(url, {\n        method: 'POST',\n        body: JSON.stringify({\n          user:\n          {\n            email: enteredEmail,\n            password: enteredPassword,\n            password_confirmation: enteredPassword\n          }\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n      .then((res) => {\n        setIsLoading(false);\n        if (res.ok) {\n          return res.json();\n        } else {\n          return res.json().then((data) => {\n            let errorMessage = data.message;\n            throw new Error(errorMessage);\n          });\n        }\n      })\n      .catch((err) => {\n        alert(err.message);\n        setIsLogin(true);\n        history.replace('/auth');\n      });\n    }\n\n    else {\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify({\n        user:\n        {\n          email: enteredEmail,\n          password: enteredPassword,\n          returnSecureToken: true\n        }\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((res) => {\n        setIsLoading(false);\n        if (res.ok) {\n          return res.json();\n        } else {\n          return res.json().then((data) => {\n            let errorMessage = data.message;\n            throw new Error(errorMessage);\n          });\n        }\n      })\n      .then((data) => {\n\n        const expirationTime = new Date(\n          new Date().getTime() + 365*3000\n        );\n        authCtx.login(data.user.auth_token, data.user.email, expirationTime.toISOString());\n        history.replace('/');\n      })\n      .catch((err) => {\n        setError(true);\n        setMessage(err.message);\n        // alert(err.message);\n      });\n    }\n  };\n\n  return (\n    <section className={classes.auth}>\n      <h1>{isLogin ? 'Login' : 'Sign Up'}</h1>\n      <form onSubmit={submitHandler}>\n        <div className={classes.control}>\n          <label htmlFor='email' style={{float:'left'}}>Your Email</label>\n          <input type='email' id='email' required ref={emailInputRef}  />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor='password' style={{float:'left'}}>Your Password</label>\n          <input\n            type='password'\n            id='password'\n            required\n            ref={passwordInputRef}\n          />\n        </div>\n        <div className={classes.actions}>\n          {!isLoading && (\n            // <button>{isLogin ? 'Login' : 'Create Account'}</button>\n            <button>{isLogin ? 'Login' : 'Create Account'}</button>\n          )}\n          {isLoading && <p>Sending request...</p>}\n          <button\n            type='button'\n            className={classes.toggle}\n            onClick={switchAuthModeHandler}\n          >\n            {/* {isLogin ? 'Create new account' : 'Login with existing account'} */}\n          </button>\n          {/* <Button variant=\"contained\">Hello World</Button> */}\n        </div>\n      </form>\n          {error &&\n            <span style={{ color: 'red' }}>{message}</span>}\n    </section>\n  );\n};\n\nexport default AuthForm;\n"]},"metadata":{},"sourceType":"module"}