{"ast":null,"code":"var _jsxFileName = \"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/Auth/AuthForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport AuthContext from '../../store/auth-context';\nimport { makeStyles } from '@material-ui/core/styles'; // import classes from './AuthForm.module.css';\n// import Button from '@mui/material/Button';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  },\n  button_color: {\n    color: 'white'\n  }\n}));\n\nconst AuthForm = () => {\n  _s();\n\n  const history = useHistory();\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n  const authCtx = useContext(AuthContext);\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const switchAuthModeHandler = () => {\n    setIsLogin(prevState => !prevState);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value;\n\n    if (enteredPassword.length < 5) {\n      alert('Password must contain atleast 5 characters');\n      return;\n    }\n\n    setIsLoading(true);\n    let url;\n\n    if (isLogin) {\n      // url =\n      // 'https://react-fetch-detail.herokuapp.com/users/sign_in';\n      // url=\"http://localhost:4000/api/v1/auth\"\n      url = 'http://localhost:4000/users/sign_in';\n    } else {\n      // url =\n      // 'https://react-fetch-detail.herokuapp.com/users';\n      // url=\"http://localhost:4000/api/v1/auth/sign_in\"\n      url = 'http://localhost:4000/users';\n    } // if (url === \"https://react-fetch-detail.herokuapp.com/users\")\n\n\n    if (url === \"http://localhost:4000/users\") // if (url === \"http://localhost:4000/api/v1/auth/sign_in\")\n      {\n        fetch(url, {\n          method: 'POST',\n          body: JSON.stringify({\n            user: {\n              email: enteredEmail,\n              password: enteredPassword\n            }\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }).then(res => {\n          setIsLoading(false);\n\n          if (res.ok) {\n            return res.json();\n          } else {\n            return res.json().then(data => {\n              let errorMessage = data.message;\n              throw new Error(errorMessage);\n            });\n          }\n        }).catch(err => {\n          alert(err.message);\n          setIsLogin(true);\n          history.replace('/auth');\n        });\n      } else {\n      fetch(url, {\n        method: 'POST',\n        body: JSON.stringify({\n          user: {\n            email: enteredEmail,\n            password: enteredPassword,\n            returnSecureToken: true\n          }\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(res => {\n        setIsLoading(false);\n\n        if (res.ok) {\n          return res.json();\n        } else {\n          return res.json().then(data => {\n            let errorMessage = data.message;\n            throw new Error(errorMessage);\n          });\n        }\n      }).then(data => {\n        const expirationTime = new Date(new Date().getTime() + 365 * 1000);\n        authCtx.login(data.user.auth_token, expirationTime.toISOString());\n        history.replace('/');\n      }).catch(err => {\n        alert(err.message);\n      });\n    }\n  };\n\n  return (\n    /*#__PURE__*/\n    // <section className={classes.auth}>\n    _jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: isLogin ? 'Login' : 'Sign Up'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: submitHandler,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            children: \"Your Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            id: \"email\",\n            required: true,\n            ref: emailInputRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"password\",\n            children: \"Your Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"password\",\n            required: true,\n            ref: passwordInputRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [!isLoading && /*#__PURE__*/_jsxDEV(\"button\", {\n            children: isLogin ? 'Login' : 'Create Account'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Sending request...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\" // className={classes.toggle}\n            ,\n            onClick: switchAuthModeHandler,\n            children: isLogin ? 'Create new account' : 'Login with existing account'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(AuthForm, \"V9mgLlHICzGobfscsxv8TBwG27I=\", false, function () {\n  return [useHistory];\n});\n\n_c = AuthForm;\nexport default AuthForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthForm\");","map":{"version":3,"sources":["/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/Auth/AuthForm.js"],"names":["useState","useRef","useContext","useHistory","AuthContext","makeStyles","useStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","button_color","color","AuthForm","history","emailInputRef","passwordInputRef","authCtx","isLogin","setIsLogin","isLoading","setIsLoading","switchAuthModeHandler","prevState","submitHandler","event","preventDefault","enteredEmail","current","value","enteredPassword","length","alert","url","fetch","method","body","JSON","stringify","user","email","password","headers","then","res","ok","json","data","errorMessage","message","Error","catch","err","replace","returnSecureToken","expirationTime","Date","getTime","login","auth_token","toISOString"],"mappings":"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","sourcesContent":["import { useState, useRef, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport AuthContext from '../../store/auth-context';\nimport { makeStyles } from '@material-ui/core/styles';\n// import classes from './AuthForm.module.css';\n\n// import Button from '@mui/material/Button';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  button_color: {\n    color: 'white',\n  }\n}));\n\n\n\n\nconst AuthForm = () => {\n  const history = useHistory();\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n\n  const authCtx = useContext(AuthContext);\n\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const switchAuthModeHandler = () => {\n    setIsLogin((prevState) => !prevState);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value;\n\n    if (enteredPassword.length < 5) {\n      alert('Password must contain atleast 5 characters');\n      return;\n    }\n\n    setIsLoading(true);\n    let url;\n    if (isLogin) {\n      // url =\n        // 'https://react-fetch-detail.herokuapp.com/users/sign_in';\n        // url=\"http://localhost:4000/api/v1/auth\"\n      url = 'http://localhost:4000/users/sign_in'\n    } else {\n      // url =\n        // 'https://react-fetch-detail.herokuapp.com/users';\n        // url=\"http://localhost:4000/api/v1/auth/sign_in\"\n      url = 'http://localhost:4000/users'\n    }\n    // if (url === \"https://react-fetch-detail.herokuapp.com/users\")\n    if (url === \"http://localhost:4000/users\")\n    // if (url === \"http://localhost:4000/api/v1/auth/sign_in\")\n\n    {\n      fetch(url, {\n        method: 'POST',\n        body: JSON.stringify({\n          user:\n          {\n            email: enteredEmail,\n            password: enteredPassword,\n          }\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n      .then((res) => {\n        setIsLoading(false);\n        if (res.ok) {\n          return res.json();\n        } else {\n          return res.json().then((data) => {\n            let errorMessage = data.message;\n            throw new Error(errorMessage);\n          });\n        }\n      })\n      .catch((err) => {\n        alert(err.message);\n        setIsLogin(true);\n        history.replace('/auth');\n      });\n    }\n\n    else {\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify({\n        user:\n        {\n          email: enteredEmail,\n          password: enteredPassword,\n          returnSecureToken: true\n        }\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((res) => {\n        setIsLoading(false);\n        if (res.ok) {\n          return res.json();\n        } else {\n          return res.json().then((data) => {\n            let errorMessage = data.message;\n            throw new Error(errorMessage);\n          });\n        }\n      })\n      .then((data) => {\n        const expirationTime = new Date(\n          new Date().getTime() + 365*1000\n        );\n        authCtx.login(data.user.auth_token, expirationTime.toISOString());\n        history.replace('/');\n      })\n      .catch((err) => {\n        alert(err.message);\n      });\n    }\n  };\n\n  return (\n    // <section className={classes.auth}>\n    <section>\n\n      <h1>{isLogin ? 'Login' : 'Sign Up'}</h1>\n      <form onSubmit={submitHandler}>\n      {/* <div className={classes.control}> */}\n      <div>\n          <label htmlFor='email'>Your Email</label>\n          <input type='email' id='email' required ref={emailInputRef} />\n        </div>\n        {/* <div className={classes.control}> */}\n        <div>\n          <label htmlFor='password'>Your Password</label>\n          <input\n            type='password'\n            id='password'\n            required\n            ref={passwordInputRef}\n          />\n        </div>\n        {/* <div className={classes.actions}> */}\n        <div>\n          {!isLoading && (\n            <button>{isLogin ? 'Login' : 'Create Account'}</button>\n          )}\n          {isLoading && <p>Sending request...</p>}\n          <button\n            type='button'\n            // className={classes.toggle}\n            onClick={switchAuthModeHandler}\n          >\n            {isLogin ? 'Create new account' : 'Login with existing account'}\n          </button>\n          {/* <Button variant=\"contained\">Hello World</Button> */}\n        </div>\n      </form>\n    </section>\n  );\n};\n\nexport default AuthForm;\n"]},"metadata":{},"sourceType":"module"}