{"ast":null,"code":"var _jsxFileName = \"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/Auth/AuthForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport AuthContext from '../../store/auth-context';\nimport classes from './AuthForm.module.css';\nimport { ngrokUrl } from '../../store/HostUrl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AuthForm = () => {\n  _s();\n\n  const history = useHistory();\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n  const authCtx = useContext(AuthContext);\n  const [isLogin, setIsLogin] = useState(true); // const [isLoading, setIsLoading] = useState(false);\n\n  const [error, setError] = useState(false);\n  const [message, setMessage] = useState();\n\n  const switchAuthModeHandler = () => {\n    setIsLogin(prevState => !prevState);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value; // if (enteredPassword.length < 5) {\n    //   alert('Password must contain atleast 5 characters');\n    //   return;\n    // }\n\n    setIsLoading(true);\n    let url;\n\n    if (isLogin) {\n      // url ='https://react-fetch-detail.herokuapp.com/users/sign_in';\n      // url=`${ngrokUrl}/api/v1/auth/sign_in\"\n      url = `${ngrokUrl}/api/v1/users/sign_in`;\n    } else {\n      // url ='https://react-fetch-detail.herokuapp.com/users';\n      // url=`${ngrokUrl}/api/v1/auth\"\n      url = `${ngrokUrl}/api/v1/users`;\n    } // if (url === \"https://react-fetch-detail.herokuapp.com/users\")\n\n\n    if (url === `${ngrokUrl}/api/v1/users`) // if (url === \"http://460b-157-47-214-197.ngrok.io/api/v1/auth\")\n      {\n        fetch(url, {\n          method: 'POST',\n          body: JSON.stringify({\n            user: {\n              email: enteredEmail,\n              password: enteredPassword,\n              password_confirmation: enteredPassword\n            }\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }).then(res => {\n          setIsLoading(false);\n\n          if (res.ok) {\n            return res.json();\n          } else {\n            return res.json().then(data => {\n              let errorMessage = data.message;\n              throw new Error(errorMessage);\n            });\n          }\n        }).catch(err => {\n          alert(err.message);\n          setIsLogin(true);\n          history.replace('/auth');\n        });\n      } else {\n      fetch(url, {\n        method: 'POST',\n        body: JSON.stringify({\n          user: {\n            email: enteredEmail,\n            password: enteredPassword,\n            returnSecureToken: true\n          }\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(res => {\n        setIsLoading(false);\n\n        if (res.ok) {\n          return res.json();\n        } else {\n          return res.json().then(data => {\n            let errorMessage = data.message;\n            throw new Error(errorMessage);\n          });\n        }\n      }).then(data => {\n        const expirationTime = new Date(new Date().getTime() + 365 * 3000);\n        authCtx.login(data.user.auth_token, data.user.email, expirationTime.toISOString());\n        history.replace('/');\n      }).catch(err => {\n        setError(true);\n        setMessage(err.message); // alert(err.message);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.auth,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: isLogin ? 'Login' : 'Sign Up'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          style: {\n            float: 'left'\n          },\n          children: \"Your Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          required: true,\n          ref: emailInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          style: {\n            float: 'left'\n          },\n          children: \"Your Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          required: true,\n          ref: passwordInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: [\n        /*#__PURE__*/\n        // <button>{isLogin ? 'Login' : 'Create Account'}</button>\n        _jsxDEV(\"button\", {\n          children: isLogin ? 'Login' : 'Create Account'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: classes.toggle,\n          onClick: switchAuthModeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        color: 'red'\n      },\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthForm, \"G4XKJ2j8WAtlOuH/WiV6OXn7hbA=\", false, function () {\n  return [useHistory];\n});\n\n_c = AuthForm;\nexport default AuthForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthForm\");","map":{"version":3,"sources":["/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/Auth/AuthForm.js"],"names":["useState","useRef","useContext","useHistory","AuthContext","classes","ngrokUrl","AuthForm","history","emailInputRef","passwordInputRef","authCtx","isLogin","setIsLogin","error","setError","message","setMessage","switchAuthModeHandler","prevState","submitHandler","event","preventDefault","enteredEmail","current","value","enteredPassword","setIsLoading","url","fetch","method","body","JSON","stringify","user","email","password","password_confirmation","headers","then","res","ok","json","data","errorMessage","Error","catch","err","alert","replace","returnSecureToken","expirationTime","Date","getTime","login","auth_token","toISOString","auth","control","float","actions","toggle","color"],"mappings":"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","sourcesContent":["import { useState, useRef, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport AuthContext from '../../store/auth-context';\nimport classes from './AuthForm.module.css';\nimport {ngrokUrl } from '../../store/HostUrl';\n\nconst AuthForm = () => {\n  const history = useHistory();\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n\n  const authCtx = useContext(AuthContext);\n\n  const [isLogin, setIsLogin] = useState(true);\n  // const [isLoading, setIsLoading] = useState(false);\n\n\n  const [error, setError] = useState(false);\n  const[message, setMessage] = useState();\n\n  const switchAuthModeHandler = () => {\n    setIsLogin((prevState) => !prevState);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value;\n\n    // if (enteredPassword.length < 5) {\n    //   alert('Password must contain atleast 5 characters');\n    //   return;\n    // }\n\n    setIsLoading(true);\n    let url;\n\n    if (isLogin) {\n      // url ='https://react-fetch-detail.herokuapp.com/users/sign_in';\n        // url=`${ngrokUrl}/api/v1/auth/sign_in\"\n        url = `${ngrokUrl}/api/v1/users/sign_in`\n      } else {\n        // url ='https://react-fetch-detail.herokuapp.com/users';\n        // url=`${ngrokUrl}/api/v1/auth\"\n      url = `${ngrokUrl}/api/v1/users`\n    }\n\n    // if (url === \"https://react-fetch-detail.herokuapp.com/users\")\n    if (url === `${ngrokUrl}/api/v1/users`)\n    // if (url === \"http://460b-157-47-214-197.ngrok.io/api/v1/auth\")\n\n    {\n      fetch(url, {\n        method: 'POST',\n        body: JSON.stringify({\n          user:\n          {\n            email: enteredEmail,\n            password: enteredPassword,\n            password_confirmation: enteredPassword\n          }\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n      .then((res) => {\n        setIsLoading(false);\n        if (res.ok) {\n          return res.json();\n        } else {\n          return res.json().then((data) => {\n            let errorMessage = data.message;\n            throw new Error(errorMessage);\n          });\n        }\n      })\n      .catch((err) => {\n        alert(err.message);\n        setIsLogin(true);\n        history.replace('/auth');\n      });\n    }\n\n    else {\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify({\n        user:\n        {\n          email: enteredEmail,\n          password: enteredPassword,\n          returnSecureToken: true\n        }\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((res) => {\n        setIsLoading(false);\n        if (res.ok) {\n          return res.json();\n        } else {\n          return res.json().then((data) => {\n            let errorMessage = data.message;\n            throw new Error(errorMessage);\n          });\n        }\n      })\n      .then((data) => {\n\n        const expirationTime = new Date(\n          new Date().getTime() + 365*3000\n        );\n        authCtx.login(data.user.auth_token, data.user.email, expirationTime.toISOString());\n        history.replace('/');\n      })\n      .catch((err) => {\n        setError(true);\n        setMessage(err.message);\n        // alert(err.message);\n      });\n    }\n  };\n\n  return (\n    <section className={classes.auth}>\n      <h1>{isLogin ? 'Login' : 'Sign Up'}</h1>\n      <form onSubmit={submitHandler}>\n        <div className={classes.control}>\n          <label htmlFor='email' style={{float:'left'}}>Your Email</label>\n          <input type='email' id='email' required ref={emailInputRef}  />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor='password' style={{float:'left'}}>Your Password</label>\n          <input\n            type='password'\n            id='password'\n            required\n            ref={passwordInputRef}\n          />\n        </div>\n        <div className={classes.actions}>\n          { (\n            // <button>{isLogin ? 'Login' : 'Create Account'}</button>\n            <button>{isLogin ? 'Login' : 'Create Account'}</button>\n          )}\n          {/* {isLoading && <p>Sending request...</p>} */}\n          <button\n            type='button'\n            className={classes.toggle}\n            onClick={switchAuthModeHandler}\n          >\n            {/* {isLogin ? 'Create new account' : 'Login with existing account'} */}\n          </button>\n          {/* <Button variant=\"contained\">Hello World</Button> */}\n        </div>\n      </form>\n          {error &&\n            <span style={{ color: 'red' }}>{message}</span>}\n    </section>\n  );\n};\n\nexport default AuthForm;\n"]},"metadata":{},"sourceType":"module"}