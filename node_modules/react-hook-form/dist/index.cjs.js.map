{"version":3,"file":"index.cjs.js","sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isDateObject.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getControllerValue.ts","../src/logic/isNameInFieldArray.ts","../src/logic/getNodeParentName.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/logic/shouldSubscribeByName.ts","../src/useSubscribe.ts","../src/useFormState.ts","../src/utils/isString.ts","../src/logic/generateWatchOutput.ts","../src/useWatch.ts","../src/useController.ts","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/getFocusFieldName.ts","../src/logic/isWatched.ts","../src/logic/mapCurrentIds.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/update.ts","../src/utils/isFunction.ts","../src/utils/cloneObject.ts","../src/utils/createSubject.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/getValidationModes.ts","../src/utils/isBoolean.ts","../src/utils/isFileInput.ts","../src/utils/isHTMLElement.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/utils/isWeb.ts","../src/utils/live.ts","../src/utils/unset.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/schemaErrorLookup.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/deepMerge.ts","../src/logic/unsetEmptyArray.ts","../src/utils/isMessage.ts","../src/utils/isRegex.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/logic/createFormControl.ts","../src/logic/getResolverOptions.ts","../src/logic/hasValidation.ts","../src/logic/skipValidation.ts","../src/utils/isRadioOrCheckbox.ts","../src/controller.tsx","../src/useFieldArray.ts","../src/utils/omitKeys.ts","../src/useForm.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T extends string | string[] | undefined>(\n  name?: T,\n  signalName?: string,\n  exact?: boolean,\n) =>\n  exact && signalName\n    ? name === signalName\n    : !name ||\n      !signalName ||\n      name === signalName ||\n      convertToArrayPayload(name).some(\n        (currentName) =>\n          currentName &&\n          (currentName.startsWith(signalName) ||\n            signalName.startsWith(currentName)),\n      );\n","import * as React from 'react';\n\nimport { Subject, Subscription } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const tearDown = (subscription: Subscription | false) => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n\n    const subscription =\n      !props.disabled &&\n      _props.current.subject.subscribe({\n        next: _props.current.callback,\n      });\n\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport {\n  FieldValues,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name, exact } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: (value) =>\n      shouldSubscribeByName(\n        _name.current as InternalFieldName,\n        value.name,\n        exact,\n      ) &&\n      shouldRenderFormState(value, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...value,\n      }),\n    subject: control._subjects.state,\n  });\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport function generateWatchOutput(\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n}\n","import * as React from 'react';\n\nimport { generateWatchOutput } from './logic/generateWatchOutput';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport isUndefined from './utils/isUndefined';\nimport {\n  Control,\n  DeepPartialSkipArrayKey,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends readonly FieldPath<TFieldValues>[] = readonly FieldPath<TFieldValues>[],\n>(props: {\n  name: TFieldNames;\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n    exact,\n  } = props || {};\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: (formState) => {\n      if (\n        shouldSubscribeByName(\n          _name.current as InternalFieldName,\n          formState.name,\n          exact,\n        )\n      ) {\n        const fieldValues = generateWatchOutput(\n          _name.current as InternalFieldName | InternalFieldName[],\n          control._names,\n          formState.values || control._formValues,\n        );\n\n        updateValue(\n          isUndefined(_name.current)\n            ? { ...fieldValues }\n            : Array.isArray(fieldValues)\n            ? [...fieldValues]\n            : fieldValues,\n        );\n      }\n    },\n  });\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n\n  return value;\n}\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldPathValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useWatch } from './useWatch';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const isArrayField = isNameInFieldArray(control._names.array, name);\n  const value = useWatch({\n    control,\n    name,\n    defaultValue: get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n    exact: !isArrayField,\n  }) as UnpackNestedValue<FieldPathValue<TFieldValues, TName>>;\n  const formState = useFormState({\n    control,\n    name,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  React.useEffect(() => {\n    const updateMounted = (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      if (\n        isArrayField\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name, { keepDefaultValue: true });\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, isArrayField, shouldUnregister]);\n\n  return {\n    field: {\n      onChange: (event) => {\n        registerProps.onChange({\n          target: {\n            value: getControllerValue(event),\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value: get(control._formValues, name),\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import * as React from 'react';\n\nimport { FieldValues } from '../types';\n\nexport default <T, K>(\n  values: T[],\n  _fieldIds: React.MutableRefObject<K>,\n  keyName: string,\n) =>\n  values.map((value, index) => {\n    const output = _fieldIds.current[index as keyof K];\n\n    return {\n      ...value,\n      ...(output ? { [keyName]: (output as FieldValues)[keyName] } : {}),\n    };\n  });\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayPath, FieldArrayWithId, FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TFieldName extends FieldArrayPath<TFieldArrayValues> = FieldArrayPath<TFieldArrayValues>,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[] =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    ...(value[keyName] ? {} : { [keyName]: generateId() }),\n    ...value,\n  })) as Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[];\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default <T>(fieldValues: T[], index: number, value: any) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport { generateWatchOutput } from './generateWatchOutput';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const updateFieldArrayDirty = (name: any, value: any) => (\n    set(\n      _formState.dirtyFields as TFieldValues,\n      name,\n      setFieldArrayDirtyFields(\n        value,\n        get(_defaultValues, name, []),\n        get(_formState.dirtyFields, name, []),\n      ),\n    ),\n    unsetEmptyArray(_formState.dirtyFields, name)\n  );\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(\n      _stateFlags.mount ? _formValues : _defaultValues,\n      name,\n      props.shouldUnregister ? get(_defaultValues, name, []) : [],\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(fieldReference.ref) && !isString(fieldValue)) {\n          fieldReference.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) &&\n      !options.disabled &&\n      set(_formValues, name, get(_formValues, name, options.value));\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              register(name, options);\n              let field: Field = get(_fields, name);\n              const fieldRef = isUndefined(ref.value)\n                ? ref.querySelectorAll\n                  ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) ||\n                    ref\n                  : ref\n                : ref;\n\n              const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n              if (\n                fieldRef === field._f.ref ||\n                (isRadioOrCheckbox &&\n                  compact(field._f.refs || []).find(\n                    (option) => option === fieldRef,\n                  ))\n              ) {\n                return;\n              }\n\n              field = {\n                _f: isRadioOrCheckbox\n                  ? {\n                      ...field._f,\n                      refs: [\n                        ...compact(field._f.refs || []).filter(live),\n                        fieldRef,\n                      ],\n                      ref: { type: fieldRef.type, name },\n                    }\n                  : {\n                      ...field._f,\n                      ref: fieldRef,\n                    },\n              };\n\n              set(_fields, name, field);\n\n              (!options || !options.disabled) &&\n                updateValidAndValue(name, false, fieldRef);\n            } else {\n              const field: Field = get(_fields, name, {});\n              const shouldUnregister =\n                _options.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = _options.shouldUnregister\n        ? cloneObject(_formValues)\n        : { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (isUndefined(options.defaultValue)) {\n      setValue(name, get(_defaultValues, name));\n    } else {\n      setValue(name, options.defaultValue);\n      set(_defaultValues, name, options.defaultValue);\n    }\n\n    if (!options.keepTouched) {\n      unset(_formState.touchedFields, name);\n    }\n\n    if (!options.keepDirty) {\n      unset(_formState.dirtyFields, name);\n      _formState.isDirty = options.defaultValue\n        ? _getDirty(name, get(_defaultValues, name))\n        : _getDirty();\n    }\n\n    if (!options.keepError) {\n      unset(_formState.errors, name);\n      _proxyFormState.isValid && _updateValid();\n    }\n\n    _subjects.state.next({ ..._formState });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values = !isEmptyObject(formValues)\n      ? cloneUpdatedValues\n      : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.watch.next({\n        values,\n      });\n\n      _subjects.array.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport isWatched from './logic/isWatched';\nimport mapCurrentIds from './logic/mapCurrentIds';\nimport mapIds from './logic/mapId';\nimport appendAt from './utils/append';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport omitKeys from './utils/omitKeys';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(mapIds(control._getFieldArray(name), keyName));\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  useSubscribe({\n    callback: ({ values, name: fieldArrayName }) => {\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        setFields(mapIds(get(values, _name.current), keyName));\n      }\n    },\n    subject: control._subjects.array,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValuesWithKey: T,\n    ) => {\n      const updatedFieldArrayValues = omitKeys(\n        updatedFieldArrayValuesWithKey,\n        keyName,\n      );\n      _actioned.current = true;\n      set(control._formValues, name, updatedFieldArrayValues);\n      return updatedFieldArrayValues;\n    },\n    [control, name, keyName],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValuesWithKey = appendAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(appendValue, keyName),\n    );\n    control._updateFieldArray(\n      name,\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValuesWithKey.length - appendValue.length,\n      options,\n    );\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = prependAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n    );\n    control._updateFieldArray(\n      name,\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = insertAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    control._updateFieldArray(\n      name,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    control._updateFieldArray(\n      name,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    const updatedFieldArrayValues = updateAt(\n      updatedFieldArrayValuesWithKey,\n      index,\n      value,\n    );\n    _fieldIds.current = mapIds<TFieldValues, TFieldArrayName, TKeyName>(\n      updatedFieldArrayValues,\n      keyName,\n    );\n    control._updateFieldArray(\n      name,\n      updateAt,\n      {\n        argA: index,\n        argB: value,\n      },\n      updateValues(_fieldIds.current),\n      true,\n      false,\n    );\n    setFields(_fieldIds.current);\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapIds<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >(convertToArrayPayload(value) as Partial<TFieldValues>[], keyName);\n    control._updateFieldArray(\n      name,\n      () => updatedFieldArrayValuesWithKey,\n      {},\n      updateValues(updatedFieldArrayValuesWithKey),\n      true,\n      false,\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    isWatched(name, control._names) && control._subjects.state.next({});\n\n    if (_actioned.current) {\n      control._executeSchema([name]).then((result) => {\n        const error = get(result.errors, name);\n\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n          control._subjects.state.next({\n            errors: control._formState.errors as FieldErrors<TFieldValues>,\n          });\n        }\n      });\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n\n    return () => {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name as FieldPath<TFieldValues>);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend, [updateValues, name, control, keyName]),\n    append: React.useCallback(append, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","import { FieldArrayWithId } from '../types';\n\nimport omit from './omit';\n\nexport default <T extends Partial<FieldArrayWithId>[]>(\n  fields: T,\n  keyName: string,\n) => fields.map((field = {}) => omit(field, keyName));\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (value) => {\n      if (shouldRenderFormState(value, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...value,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"names":["element","type","data","Date","value","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","event","isObject","target","isCheckBoxInput","checked","names","name","some","current","substring","search","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","HookFormContext","React","createContext","useFormContext","useContext","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","Object","defineProperty","get","keys","length","formStateData","omit","isEmptyObject","find","signalName","exact","convertToArrayPayload","currentName","startsWith","useSubscribe","props","_props","useRef","useEffect","subscription","disabled","subject","subscribe","next","callback","unsubscribe","tearDown","useFormState","methods","control","updateFormState","useState","_formState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","shouldSubscribeByName","shouldRenderFormState","_subjects","state","getProxyFormState","generateWatchOutput","_names","formValues","isGlobal","isString","watch","add","map","fieldName","watchAll","useWatch","fieldValues","values","_formValues","updateValue","_getWatch","_removeUnmounted","useController","shouldUnregister","isArrayField","isNameInFieldArray","array","_defaultValues","registerProps","register","rules","updateMounted","field","_fields","_f","mount","_shouldUnregisterField","_options","_stateFlags","action","unregister","keepDefaultValue","onChange","getControllerValue","onBlur","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","validateAllFieldCriteria","types","[object Object]","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","refs","options","shouldFocus","focusName","focusIndex","isBlurEvent","has","watchName","slice","_fieldIds","keyName","output","d","performance","now","c","r","Math","random","toString","generateId","append","insert","from","to","splice","prepend","indexes","i","temp","removeAtIndexes","sort","a","b","indexA","indexB","cloneObject","Set","isFunction","createSubject","_observers","observers","observer","push","o","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","window","document","isHTMLElement","contains","unset","updatePath","childObject","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","validResult","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","schemaErrorLookup","join","foundError","pop","setDirtyFields","defaultValues","parentNode","parentName","deepMerge","targetValue","sourceValue","isValidElement","RegExp","getValidateError","isMessage","validationData","isRegex","async","inputValue","shouldUseNativeValidation","required","maxLength","minLength","min","max","pattern","validate","inputRef","setCustomValidty","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","reValidateMode","shouldFocusError","isWindowUndefined","createFormControl","delayErrorCallback","isSubmitted","submitCount","isSubmitting","isSubmitSuccessful","unMount","timer","validateFields","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","criteriaMode","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuildInValidation","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","isPreviousFieldTouched","isPreviousFormDirty","_getDirty","isPreviousFieldDirty","updateFieldArrayDirty","setFieldArrayDirtyFields","unsetEmptyArray","shouldRenderByError","previousFieldError","shouldUpdateValid","wait","delayError","args","clearTimeout","setTimeout","updatedFormState","context","getResolverOptions","shouldOnlyCheckValid","valid","fieldReference","fieldError","validateField","getValues","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","isWatched","handleChange","shouldSkipValidation","deps","skipValidation","watched","previousErrorLookupResult","errorLookupResult","fieldNames","executeSchemaAndUpdateState","Promise","all","delete","keepValue","keepError","keepDirty","keepTouched","keepIsValid","fieldRef","querySelectorAll","isRadioOrCheckboxFunction","live","_updateFieldArray","method","shouldSetValues","shouldSetFields","argA","argB","_getFieldArray","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","info","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","resetField","clearErrors","inputName","setError","setFocus","render","Provider","children","setFields","mapIds","_actioned","fieldArrayName","updateValues","useCallback","updatedFieldArrayValuesWithKey","updatedFieldArrayValues","omitKeys","then","swap","mapCurrentIds","swapArrayAt","move","moveArrayAt","prependAt","fillEmptyArray","getFocusFieldName","appendValue","appendAt","remove","removeArrayAt","insertAt","update","updateAt","_formControl"],"mappings":"+XAEgBA,GACG,aAAjBA,EAAQC,OCHMC,GAAkBA,aAAgBC,OCAlCC,GAAuD,MAATA,ECGvD,MAAMC,EAAgBD,GAAoC,iBAAVA,EAEvD,MAAkCA,IAC/BE,EAAkBF,KAClBG,MAAMC,QAAQJ,IACfC,EAAaD,KACZK,EAAaL,KCJAM,GACdC,EAASD,IAAWA,EAAgBE,OAChCC,EAAiBH,EAAgBE,QAC9BF,EAAgBE,OAAOE,QACvBJ,EAAgBE,OAAOR,MAC1BM,ICNS,CAACK,EAA+BC,IAC7C,IAAID,GAAOE,KAAMC,GCLJ,CAACF,GAAiBA,EAAKG,UAAU,EAAGH,EAAKI,OAAO,SAAWJ,EDK3CK,CAAkBL,KAAUE,KEL3Cd,GAAiBA,EAAMkB,OAAOC,WCA9BC,QAA2CC,IAARD,ICKpC,CAAIE,EAAQC,EAAcC,KACvC,GAAIjB,EAASe,IAAQC,EAAM,CACzB,MAAME,EAASC,EAAQH,EAAKI,MAAM,cAAcC,OAC9C,CAACH,EAAQI,IAAS3B,EAAkBuB,GAAUA,EAASA,EAAOI,GAC9DP,GAGF,OAAOQ,EAAYL,IAAWA,IAAWH,EACrCQ,EAAYR,EAAIC,IACdC,EACAF,EAAIC,GACNE,ICdD,MAAMM,EACL,OADKA,EAEH,SAGGC,EACH,SADGA,EAED,WAFCA,EAGD,WAHCA,EAIA,YAJAA,EAKN,MAGMC,EACN,MADMA,EAEN,MAFMA,EAGA,YAHAA,EAIA,YAJAA,EAKF,UALEA,EAMD,WANCA,EAOD,WCtBZ,MAAe,CACbC,EACAL,KAEA,MAAMM,mBAAYD,GAGlB,cAFOC,EAAKN,GAELM,GCFT,MAAMC,EAAkBC,EAAMC,cAAoC,MAErDC,EAAiB,IAG5BF,EAAMG,WAAWJ,GCPnB,MAAe,CACbK,EACAC,EACAC,EACAC,GAAS,KAET,SAASC,EAAaC,GACpB,MAAO,KACL,GAAIA,KAAQL,EAKV,OAJIC,EAAgBI,KAAUd,IAC5BU,EAAgBI,IAASF,GAAUZ,GAErCW,IAAwBA,EAAoBG,IAAQ,GAC7CL,EAAUK,IAMvB,MAAMrB,EAAS,GACf,IAAK,MAAMI,KAAOY,EAChBM,OAAOC,eAAevB,EAAQI,EAAK,CACjCoB,IAAKJ,EAAahB,KAItB,OAAOJ,KCzBOzB,GACdO,EAASP,KAAW+C,OAAOG,KAAKlD,GAAOmD,SCA1B,CACbC,EACAV,EACAE,KAEA,MAAMH,EAAYY,EAAKD,EAAe,QAEtC,OACEE,EAAcb,IACdM,OAAOG,KAAKT,GAAWU,QAAUJ,OAAOG,KAAKR,GAAiBS,QAC9DJ,OAAOG,KAAKT,GAAWc,KACpB1B,GACCa,EAAgBb,OACde,GAAUZ,OClBDhC,GAAcG,MAAMC,QAAQJ,GAASA,EAAQ,CAACA,KCElD,CACbY,EACA4C,EACAC,IAEAA,GAASD,EACL5C,IAAS4C,GACR5C,IACA4C,GACD5C,IAAS4C,GACTE,EAAsB9C,GAAMC,KACzB8C,GACCA,IACCA,EAAYC,WAAWJ,IACtBA,EAAWI,WAAWD,cCNlBE,EAAgBC,GAC9B,MAAMC,EAAS1B,EAAM2B,OAAOF,GAC5BC,EAAOjD,QAAUgD,EAEjBzB,EAAM4B,UAAU,KACd,MAMMC,GACHJ,EAAMK,UACPJ,EAAOjD,QAAQsD,QAAQC,UAAU,CAC/BC,KAAMP,EAAOjD,QAAQyD,WAGzB,MAAO,IAZU,CAACL,IACZA,GACFA,EAAaM,eAUJC,CAASP,IACrB,CAACJ,EAAMK,WCdZ,SAASO,EACPZ,GAEA,MAAMa,EAAUpC,KACVqC,QAAEA,EAAUD,EAAQC,QAAOT,SAAEA,EAAQvD,KAAEA,EAAI6C,MAAEA,GAAUK,GAAS,IAC/DrB,EAAWoC,GAAmBxC,EAAMyC,SAASF,EAAQG,YACtDC,EAAuB3C,EAAM2B,OAAO,CACxCiB,SAAS,EACTC,aAAa,EACbC,eAAe,EACfC,cAAc,EACdC,SAAS,EACTC,QAAQ,IAEJC,EAAQlD,EAAM2B,OAAOpD,GAoB3B,OAlBA2E,EAAMzE,QAAUF,EAEhBiD,EAAa,CACXM,SAAAA,EACAI,SAAWvE,GACTwF,EACED,EAAMzE,QACNd,EAAMY,KACN6C,IAEFgC,EAAsBzF,EAAOgF,EAAqBlE,UAClD+D,iCACKD,EAAQG,YACR/E,IAEPoE,QAASQ,EAAQc,UAAUC,QAGtBC,EACLnD,EACAmC,EAAQlC,gBACRsC,EAAqBlE,SACrB,GCpDJ,MAAgBd,GAAqD,iBAAVA,WCI3C6F,EACdlF,EACAmF,EACAC,EACAC,GAEA,MAAM5F,EAAUD,MAAMC,QAAQO,GAC9B,OAAIsF,EAAStF,IACXqF,GAAYF,EAAOI,MAAMC,IAAIxF,GACtBsC,EAAI8C,EAAYpF,IAGrBP,EACKO,EAAMyF,IACVC,IACCL,GAAYF,EAAOI,MAAMC,IAAIE,GAC7BpD,EAAI8C,EAAYM,MAKtBL,IAAaF,EAAOQ,UAAW,GACxBP,YCyBOQ,EAAuBzC,GACrC,MAAMa,EAAUpC,KACVqC,QACJA,EAAUD,EAAQC,QAAOhE,KACzBA,EAAIY,aACJA,EAAY2C,SACZA,EAAQV,MACRA,GACEK,GAAS,GACPyB,EAAQlD,EAAM2B,OAAOpD,GAE3B2E,EAAMzE,QAAUF,EAEhBiD,EAAa,CACXM,SAAAA,EACAC,QAASQ,EAAQc,UAAUQ,MAC3B3B,SAAW9B,IACT,GACE+C,EACED,EAAMzE,QACN2B,EAAU7B,KACV6C,GAEF,CACA,MAAM+C,EAAcX,EAClBN,EAAMzE,QACN8D,EAAQkB,OACRrD,EAAUgE,QAAU7B,EAAQ8B,aAG9BC,EACE7E,EAAYyD,EAAMzE,0BACT0F,GACLrG,MAAMC,QAAQoG,GACd,IAAIA,GACJA,OAMZ,MAAOxG,EAAO2G,GAAetE,EAAMyC,SACjChD,EAAYN,GACRoD,EAAQgC,UAAUhG,GAClBY,GAON,OAJAa,EAAM4B,UAAU,KACdW,EAAQiC,qBAGH7G,WClFO8G,EAIdhD,GAEA,MAAMa,EAAUpC,KACV3B,KAAEA,EAAIgE,QAAEA,EAAUD,EAAQC,QAAOmC,iBAAEA,GAAqBjD,EACxDkD,EAAeC,EAAmBrC,EAAQkB,OAAOoB,MAAOtG,GACxDZ,EAAQuG,EAAS,CACrB3B,QAAAA,EACAhE,KAAAA,EACAY,aAAcyB,EACZ2B,EAAQ8B,YACR9F,EACAqC,EAAI2B,EAAQuC,eAAgBvG,EAAMkD,EAAMtC,eAE1CiC,OAAQuD,IAEJvE,EAAYiC,EAAa,CAC7BE,QAAAA,EACAhE,KAAAA,IAEYyB,EAAM2B,OAAOpD,GAErBE,QAAUF,EAEhB,MAAMwG,EAAgBxC,EAAQyC,SAASzG,iCAClCkD,EAAMwD,QACTtH,MAAAA,KA8BF,OA3BAqC,EAAM4B,UAAU,KACd,MAAMsD,EAAgB,CAAC3G,EAAyBZ,KAC9C,MAAMwH,EAAevE,EAAI2B,EAAQ6C,QAAS7G,GAEtC4G,IACFA,EAAME,GAAGC,MAAQ3H,IAMrB,OAFAuH,EAAc3G,GAAM,GAEb,KACL,MAAMgH,EACJhD,EAAQiD,SAASd,kBAAoBA,GAGrCC,EACIY,IAA2BhD,EAAQkD,YAAYC,OAC/CH,GAEJhD,EAAQoD,WAAWpH,EAAM,CAAEqH,kBAAkB,IAE7CV,EAAc3G,GAAM,KAGvB,CAACA,EAAMgE,EAASoC,EAAcD,IAE1B,CACLS,MAAO,CACLU,SAAW5H,IACT8G,EAAcc,SAAS,CACrB1H,OAAQ,CACNR,MAAOmI,EAAmB7H,GAC1BM,KAAMA,GAERf,KAAMkC,KAGVqG,OAAQ,KACNhB,EAAcgB,OAAO,CACnB5H,OAAQ,CACNR,MAAOiD,EAAI2B,EAAQ8B,YAAa9F,GAChCA,KAAMA,GAERf,KAAMkC,KAGVnB,KAAAA,EACAZ,MAAAA,EACAqI,IAAMC,IACJ,MAAMd,EAAQvE,EAAI2B,EAAQ6C,QAAS7G,GAE/B0H,GAAOd,GAASc,EAAIC,QACtBf,EAAME,GAAGW,IAAM,CACbE,MAAO,IAAMD,EAAIC,QACjBC,kBAAoBC,GAClBH,EAAIE,kBAAkBC,GACxBC,eAAgB,IAAMJ,EAAII,qBAKlCjG,UAAAA,EACAkG,WAAY,CACVC,UAAW3F,EAAIR,EAAU6C,OAAQ1E,GACjCqE,UAAWhC,EAAIR,EAAUyC,YAAatE,GACtCiI,YAAa5F,EAAIR,EAAU0C,cAAevE,GAC1CkI,MAAO7F,EAAIR,EAAU6C,OAAQ1E,KCjHnC,MAAe,CACbA,EACAmI,EACAzD,EACAzF,EACA4I,IAEAM,iCAESzD,EAAO1E,KACVoI,qCACM1D,EAAO1E,IAAS0E,EAAO1E,GAAOoI,MAAQ1D,EAAO1E,GAAOoI,MAAQ,KAChEC,CAACpJ,GAAO4I,IAAW,MAGvB,KCrBUzI,GAAkB,QAAQkJ,KAAKlJ,KCE/BmJ,GACdzH,EAAQyH,EAAMC,QAAQ,YAAa,IAAIzH,MAAM,mBCGvB0H,EACtBC,EACA/H,EACAvB,GAEA,IAAIuJ,GAAS,EACb,MAAMC,EAAWC,EAAMlI,GAAQ,CAACA,GAAQmI,EAAanI,GAC/C4B,EAASqG,EAASrG,OAClBwG,EAAYxG,EAAS,EAE3B,OAASoG,EAAQpG,GAAQ,CACvB,MAAMtB,EAAM2H,EAASD,GACrB,IAAIK,EAAW5J,EAEf,GAAIuJ,IAAUI,EAAW,CACvB,MAAME,EAAWP,EAAOzH,GACxB+H,EACErJ,EAASsJ,IAAa1J,MAAMC,QAAQyJ,GAChCA,EACCC,OAAON,EAASD,EAAQ,IAEzB,GADA,GAGRD,EAAOzH,GAAO+H,EACdN,EAASA,EAAOzH,GAElB,OAAOyH,EC1BT,MAAMS,EAAe,CACnBC,EACAzF,EACA0F,KAEA,IAAK,MAAMpI,KAAOoI,GAAelH,OAAOG,KAAK8G,GAAS,CACpD,MAAMxC,EAAQvE,EAAI+G,EAAQnI,GAE1B,GAAI2F,EAAO,CACT,MAAME,EAAKF,EAAME,GACX5G,EAAUuC,EAAKmE,EAAO,MAE5B,GAAIE,GAAMnD,EAASmD,EAAG9G,MAAO,CAC3B,GAAI8G,EAAGW,IAAIE,OAASzG,EAAY4F,EAAGW,IAAIE,SACrC,MACK,GAAIb,EAAGwC,KAAM,CAClBxC,EAAGwC,KAAK,GAAG3B,QACX,YAEOhI,EAASO,IAClBiJ,EAAajJ,EAASyD,MCvB9B,MAAe,CACb3D,EACA2I,EACAY,EAAiC,KAEjCA,EAAQC,aAAetI,EAAYqI,EAAQC,aACvCD,EAAQE,WACR,GAAGzJ,KAAQkB,EAAYqI,EAAQG,YAAcf,EAAQY,EAAQG,cAC7D,KCTS,CACb1J,EACAkF,EACAyE,KAECA,IACAzE,EAAOQ,UACNR,EAAOI,MAAMsE,IAAI5J,IACjB,IAAIkF,EAAOI,OAAOrF,KACf4J,GACC7J,EAAKgD,WAAW6G,IAChB,SAASvB,KAAKtI,EAAK8J,MAAMD,EAAUtH,aCT5B,CACbsD,EACAkE,EACAC,IAEAnE,EAAOL,IAAI,CAACpG,EAAOuJ,KACjB,MAAMsB,EAASF,EAAU7J,QAAQyI,GAEjC,sCACKvJ,GACC6K,EAAS,CAAE5B,CAAC2B,GAAWC,EAAuBD,IAAa,QCdtD,KACb,MAAME,EACmB,oBAAhBC,YAA8BhL,KAAKiL,MAA4B,IAApBD,YAAYC,MAEhE,MAAO,uCAAuC5B,QAAQ,QAAU6B,IAC9D,MAAMC,GAAqB,GAAhBC,KAAKC,SAAgBN,GAAK,GAAK,EAE1C,OAAa,KAALG,EAAWC,EAAS,EAAJA,EAAW,GAAKG,SAAS,SCHtC,CAKb5E,EAAuC,GACvCmE,IAEAnE,EAAOL,IAAKpG,kCACNA,EAAM4K,GAAW,GAAK,CAAE3B,CAAC2B,GAAUU,MACpCtL,aCZiBuL,EAAUzL,EAAWE,GAC3C,MAAO,IAAI0D,EAAsB5D,MAAU4D,EAAsB1D,ICHnE,MAAmBA,GACjBG,MAAMC,QAAQJ,GAASA,EAAMoG,IAAI,aAAmB/E,WCO9BmK,EACtB1L,EACAyJ,EACAvJ,GAEA,MAAO,IACFF,EAAK4K,MAAM,EAAGnB,MACd7F,EAAsB1D,MACtBF,EAAK4K,MAAMnB,ICdlB,MAAe,CACbzJ,EACA2L,EACAC,IAEIvL,MAAMC,QAAQN,IACZgC,EAAYhC,EAAK4L,MACnB5L,EAAK4L,QAAMrK,GAEbvB,EAAK6L,OAAOD,EAAI,EAAG5L,EAAK6L,OAAOF,EAAM,GAAG,IACjC3L,GAGF,YCbe8L,GAAW9L,EAAWE,GAC5C,MAAO,IAAI0D,EAAsB1D,MAAW0D,EAAsB5D,ICapE,OAAe,CAAIA,EAAWyJ,IAC5BzH,EAAYyH,GACR,GAdN,SAA4BzJ,EAAW+L,GACrC,IAAIC,EAAI,EACR,MAAMC,EAAO,IAAIjM,GAEjB,IAAK,MAAMyJ,KAASsC,EAClBE,EAAKJ,OAAOpC,EAAQuC,EAAG,GACvBA,IAGF,OAAOpK,EAAQqK,GAAM5I,OAAS4I,EAAO,GAMjCC,CACElM,EACC4D,EAAsB6F,GAAoB0C,KAAK,CAACC,EAAGC,IAAMD,EAAIC,OCrBvD,CAAIrM,EAAWsM,EAAgBC,KAC5CvM,EAAKsM,GAAU,CAACtM,EAAKuM,GAAUvM,EAAKuM,GAAUvM,EAAKsM,IAAU,OCDhD,CAAI5F,EAAkB+C,EAAevJ,KAClDwG,EAAY+C,GAASvJ,EACdwG,GCFT,OAAgBxG,GACG,mBAAVA,WCEesM,GAAexM,GACrC,IAAIqC,EACJ,MAAM/B,EAAUD,MAAMC,QAAQN,GAE9B,GAAIA,aAAgBC,KAClBoC,EAAO,IAAIpC,KAAKD,QACX,GAAIA,aAAgByM,IACzBpK,EAAO,IAAIoK,IAAIzM,OACV,CAAA,IAAIM,IAAWG,EAAST,GAU7B,OAAOA,EATPqC,EAAO/B,EAAU,GAAK,GACtB,IAAK,MAAMyB,KAAO/B,EAAM,CACtB,GAAI0M,GAAW1M,EAAK+B,IAAO,CACzBM,EAAOrC,EACP,MAEFqC,EAAKN,GAAOyK,GAAYxM,EAAK+B,KAMjC,OAAOM,WCResK,KACtB,IAAIC,EAA4B,GAqBhC,MAAO,CACLC,gBACE,OAAOD,GAETpI,KAvBYtE,IACZ,IAAK,MAAM4M,KAAYF,EACrBE,EAAStI,KAAKtE,IAsBhBqE,UAlBiBuI,IACjBF,EAAWG,KAAKD,GACT,CACLpI,YAAa,KACXkI,EAAaA,EAAWxL,OAAQ4L,GAAMA,IAAMF,MAehDpI,YAVkB,KAClBkI,EAAa,KC9BjB,OAAgB1M,GACdE,EAAkBF,KAAWC,EAAaD,YCDpB+M,GAAUC,EAAcC,GAC9C,GAAIC,GAAYF,IAAYE,GAAYD,GACtC,OAAOD,IAAYC,EAGrB,GAAI5M,EAAa2M,IAAY3M,EAAa4M,GACxC,OAAOD,EAAQG,YAAcF,EAAQE,UAGvC,MAAMC,EAAQrK,OAAOG,KAAK8J,GACpBK,EAAQtK,OAAOG,KAAK+J,GAE1B,GAAIG,EAAMjK,SAAWkK,EAAMlK,OACzB,OAAO,EAGT,IAAK,MAAMtB,KAAOuL,EAAO,CACvB,MAAME,EAAON,EAAQnL,GAErB,IAAKwL,EAAME,SAAS1L,GAClB,OAAO,EAGT,GAAY,QAARA,EAAe,CACjB,MAAM2L,EAAOP,EAAQpL,GAErB,GACGxB,EAAaiN,IAASjN,EAAamN,IACnCjN,EAAS+M,IAAS/M,EAASiN,IAC3BrN,MAAMC,QAAQkN,IAASnN,MAAMC,QAAQoN,IACjCT,GAAUO,EAAME,GACjBF,IAASE,EAEb,OAAO,GAKb,OAAO,ECxCT,OACEC,KAQAC,YAAaD,GAAQA,IAASzL,EAC9B2L,SAAUF,IAASzL,EACnB4L,WAAYH,IAASzL,EACrB6L,QAASJ,IAASzL,EAClB8L,UAAWL,IAASzL,OChBNhC,GAAsD,kBAAVA,KCE5CJ,GACG,SAAjBA,EAAQC,QCHMG,GACdA,aAAiB+N,eCCHnO,GACG,oBAAjBA,EAAQC,QCDMD,GACG,UAAjBA,EAAQC,QCHuB,oBAAXmO,aACU,IAAvBA,OAAOD,aACM,oBAAbE,YCEO5F,GAAa6F,GAAc7F,IAAQ4F,SAASE,SAAS9F,YCc7C+F,GAAM9E,EAAa/H,GACzC,MAAM8M,EAAa5E,EAAMlI,GAAQ,CAACA,GAAQmI,EAAanI,GACjD+M,EACiB,GAArBD,EAAWlL,OAAcmG,EAd7B,SAAiBA,EAAa+E,GAC5B,MAAMlL,EAASkL,EAAW3D,MAAM,GAAI,GAAGvH,OACvC,IAAIoG,EAAQ,EAEZ,KAAOA,EAAQpG,GACbmG,EAASxH,EAAYwH,GAAUC,IAAUD,EAAO+E,EAAW9E,MAG7D,OAAOD,EAM6BiF,CAAQjF,EAAQ+E,GAC9CxM,EAAMwM,EAAWA,EAAWlL,OAAS,GAC3C,IAAIqL,EAEAF,UACKA,EAAYzM,GAGrB,IAAK,IAAI4M,EAAI,EAAGA,EAAIJ,EAAW3D,MAAM,GAAI,GAAGvH,OAAQsL,IAAK,CACvD,IACIC,EADAnF,GAAS,EAEb,MAAMoF,EAAeN,EAAW3D,MAAM,IAAK+D,EAAI,IACzCG,EAAqBD,EAAaxL,OAAS,EAMjD,IAJIsL,EAAI,IACND,EAAiBlF,KAGVC,EAAQoF,EAAaxL,QAAQ,CACpC,MAAM0L,EAAOF,EAAapF,GAC1BmF,EAAYA,EAAYA,EAAUG,GAAQvF,EAAOuF,GAG/CD,IAAuBrF,IACrBhJ,EAASmO,IAAcpL,EAAcoL,IACpCvO,MAAMC,QAAQsO,KACZA,EAAUxN,OACRpB,GACES,EAAST,KAAUwD,EAAcxD,IAAUgP,GAAUhP,IACxDqD,UAENqL,SAAwBA,EAAeK,UAAevF,EAAOuF,IAG/DL,EAAiBE,GAIrB,OAAOpF,ECpDT,MAAMyF,GAAqC,CACzC/O,OAAO,EACPqF,SAAS,GAGL2J,GAAc,CAAEhP,OAAO,EAAMqF,SAAS,GAE5C,OAAgB8E,IACd,GAAIhK,MAAMC,QAAQ+J,GAAU,CAC1B,GAAIA,EAAQhH,OAAS,EAAG,CACtB,MAAMsD,EAAS0D,EACZjJ,OAAQ+N,GAAWA,GAAUA,EAAOvO,UAAYuO,EAAO9K,UACvDiC,IAAK6I,GAAWA,EAAOjP,OAC1B,MAAO,CAAEA,MAAOyG,EAAQpB,UAAWoB,EAAOtD,QAG5C,OAAOgH,EAAQ,GAAGzJ,UAAYyJ,EAAQ,GAAGhG,SAErCgG,EAAQ,GAAG+E,aAAepN,EAAYqI,EAAQ,GAAG+E,WAAWlP,OAC1D8B,EAAYqI,EAAQ,GAAGnK,QAA+B,KAArBmK,EAAQ,GAAGnK,MAC1CgP,GACA,CAAEhP,MAAOmK,EAAQ,GAAGnK,MAAOqF,SAAS,GACtC2J,GACFD,GAGN,OAAOA,OC9BM,CACb/O,GACEmP,cAAAA,EAAeC,YAAAA,EAAaC,WAAAA,KAE9BvN,EAAY9B,GACRA,EACAmP,EACU,KAAVnP,EACEsP,KACCtP,EACHoP,EACA,IAAIrP,KAAKC,GACTqP,EACAA,EAAWrP,GACXA,ECZN,MAAMuP,GAAkC,CACtClK,SAAS,EACTrF,MAAO,MAGT,OAAgBmK,GACdhK,MAAMC,QAAQ+J,GACVA,EAAQvI,OACN,CAAC4N,EAAUP,IACTA,GAAUA,EAAOvO,UAAYuO,EAAO9K,SAChC,CACEkB,SAAS,EACTrF,MAAOiP,EAAOjP,OAEhBwP,EACND,IAEFA,YCXkBE,GAAc/H,GACpC,MAAMW,EAAMX,EAAGW,IAEf,KAAIX,EAAGwC,KAAOxC,EAAGwC,KAAKwF,MAAOrH,GAAQA,EAAIlE,UAAYkE,EAAIlE,UAIzD,OAAIwL,GAAYtH,GACPA,EAAIuH,MAGTC,GAAaxH,GACRyH,GAAcpI,EAAGwC,MAAMlK,MAG5B+P,GAAiB1H,GACZ,IAAIA,EAAI2H,iBAAiB5J,IAAI,EAAGpG,MAAAA,KAAYA,GAGjDiQ,EAAW5H,GACN6H,GAAiBxI,EAAGwC,MAAMlK,MAG5BmQ,GAAgBrO,EAAYuG,EAAIrI,OAAS0H,EAAGW,IAAIrI,MAAQqI,EAAIrI,MAAO0H,YC9BpD0I,GACtB9K,EACAmC,EACA7G,GAKA,MAAMkI,EAAQ7F,EAAIqC,EAAQ1E,GAE1B,GAAIkI,GAASW,EAAM7I,GACjB,MAAO,CACLkI,MAAAA,EACAlI,KAAAA,GAIJ,MAAMD,EAAQC,EAAKe,MAAM,KAEzB,KAAOhB,EAAMwC,QAAQ,CACnB,MAAMkD,EAAY1F,EAAM0P,KAAK,KACvB7I,EAAQvE,EAAIwE,EAASpB,GACrBiK,EAAarN,EAAIqC,EAAQe,GAE/B,GAAImB,IAAUrH,MAAMC,QAAQoH,IAAU5G,IAASyF,EAC7C,MAAO,CAAEzF,KAAAA,GAGX,GAAI0P,GAAcA,EAAWzQ,KAC3B,MAAO,CACLe,KAAMyF,EACNyC,MAAOwH,GAIX3P,EAAM4P,MAGR,MAAO,CACL3P,KAAAA,GCrCJ,SAAS4P,GAKP/J,EACAgK,EACAvL,EACAwL,EACAC,GAEA,IAAIpH,GAAS,EAEb,OAASA,EAAQ9C,EAAOtD,QAAQ,CAC9B,IAAK,MAAMtB,KAAO4E,EAAO8C,GACnBpJ,MAAMC,QAAQqG,EAAO8C,GAAO1H,MAC7BqD,EAAYqE,KAAWrE,EAAYqE,GAAS,IAC7CrE,EAAYqE,GAAO1H,GAAO,GAC1B2O,GACE/J,EAAO8C,GAAO1H,GACdoB,EAAIwN,EAAclH,IAAU,GAAI1H,EAAK,IACrCqD,EAAYqE,GAAO1H,GACnBqD,EAAYqE,GACZ1H,KAGD3B,EAAkBuQ,IACnB1D,GAAU9J,EAAIwN,EAAclH,IAAU,GAAI1H,GAAM4E,EAAO8C,GAAO1H,IAC1DwH,EAAInE,EAAYqE,IAAU,GAAI1H,GAC7BqD,EAAYqE,kCACRrE,EAAYqE,KACfN,CAACpH,IAAM,IAKjB6O,IACGxL,EAAY/B,eACNuN,EAAWC,GAGtB,OAAOzL,EAGT,OAAe,CACbuB,EACAgK,EACAvL,aClDc0L,EAGdpQ,EAAW0B,GACX,GAAIgL,GAAY1M,IAAW0M,GAAYhL,GACrC,OAAOA,EAGT,IAAK,MAAML,KAAOK,EAAQ,CACxB,MAAM2O,EAAcrQ,EAAOqB,GACrBiP,EAAc5O,EAAOL,GAE3B,IACErB,EAAOqB,GACJtB,EAASsQ,IAAgBtQ,EAASuQ,IAClC3Q,MAAMC,QAAQyQ,IAAgB1Q,MAAMC,QAAQ0Q,GACzCF,EAAUC,EAAaC,GACvBA,EACN,WAGJ,OAAOtQ,ED+BPoQ,CACEJ,GAAe/J,EAAQgK,EAAevL,EAAYwF,MAAM,EAAGjE,EAAOtD,SAClEqN,GAAeC,EAAehK,EAAQvB,EAAYwF,MAAM,EAAGjE,EAAOtD,aErDvD,CAAIkF,EAAQzH,KACxBc,EAAQuB,EAAIoF,EAAKzH,EAAM,KAAKuC,QAAUiL,GAAM/F,EAAKzH,MCApCZ,GACdiG,EAASjG,IAAUqC,EAAM0O,eAAe/Q,MCN1BA,GAAoCA,aAAiBgR,gBCI7CC,GACtBxP,EACA4G,EACAxI,EAAO,YAEP,GACEqR,GAAUzP,IACTtB,MAAMC,QAAQqB,IAAWA,EAAOiO,MAAMwB,KACtCpC,GAAUrN,KAAYA,EAEvB,MAAO,CACL5B,KAAAA,EACA4I,QAASyI,GAAUzP,GAAUA,EAAS,GACtC4G,IAAAA,GCbN,OAAgB8I,GACd5Q,EAAS4Q,KAAoBC,GAAQD,GACjCA,EACA,CACEnR,MAAOmR,EACP1I,QAAS,OCWF4I,MACb7J,EACA8J,EACAvI,EACAwI,KAEA,MAAMlJ,IACJA,EAAG6B,KACHA,EAAIsH,SACJA,EAAQC,UACRA,EAASC,UACTA,EAASC,IACTA,EAAGC,IACHA,EAAGC,QACHA,EAAOC,SACPA,EAAQlR,KACRA,EAAIuO,cACJA,EAAaxH,MACbA,EAAKxD,SACLA,GACEqD,EAAME,GACV,IAAKC,GAASxD,EACZ,MAAO,GAET,MAAM4N,EAA6B7H,EAAOA,EAAK,GAAM7B,EAC/C2J,EAAoBvJ,IACpB8I,GAA6BQ,EAASrJ,iBACxCqJ,EAASvJ,kBAAkBsG,GAAUrG,GAAW,GAAKA,GAAW,KAChEsJ,EAASrJ,mBAGPI,EAA6B,GAC7BmJ,EAAUpC,GAAaxH,GACvB4H,EAAaxP,EAAgB4H,GAC7B6J,EAAoBD,GAAWhC,EAC/BkC,GACFhD,GAAiBQ,GAAYtH,MAAUA,EAAIrI,OAC9B,KAAfsR,GACCnR,MAAMC,QAAQkR,KAAgBA,EAAWnO,OACtCiP,EAAoBC,EAAaC,KACrC,KACA1R,EACAmI,EACAD,GAEIyJ,EAAmB,CACvBC,EACAC,EACAC,EACAC,EAAU1Q,EACV2Q,EAAU3Q,KAEV,MAAMwG,EAAU+J,EAAYC,EAAmBC,EAC/C5J,EAAMlI,kBACJf,KAAM2S,EAAYG,EAAUC,EAC5BnK,QAAAA,EACAJ,IAAAA,GACG+J,EAAkBI,EAAYG,EAAUC,EAASnK,KAIxD,GACE+I,KACGU,IAAsBC,GAAWjS,EAAkBoR,KACnDxC,GAAUwC,KAAgBA,GAC1BrB,IAAeC,GAAiBhG,GAAM7E,SACtC4M,IAAYnC,GAAc5F,GAAM7E,SACnC,CACA,MAAMrF,MAAEA,EAAKyI,QAAEA,GAAYyI,GAAUM,GACjC,CAAExR,QAASwR,EAAU/I,QAAS+I,GAC9BqB,GAAmBrB,GAEvB,GAAIxR,IACF8I,EAAMlI,kBACJf,KAAMoC,EACNwG,QAAAA,EACAJ,IAAK0J,GACFK,EAAkBnQ,EAAiCwG,KAEnDM,GAEH,OADAiJ,EAAiBvJ,GACVK,EAKb,KAAKqJ,GAAajS,EAAkByR,IAASzR,EAAkB0R,IAAO,CACpE,IAAIY,EACAM,EACJ,MAAMC,EAAYF,GAAmBjB,GAC/BoB,EAAYH,GAAmBlB,GAErC,GAAK7H,MAAMwH,GASJ,CACL,MAAM2B,EACH5K,EAAyB+G,aAAe,IAAIrP,KAAKuR,GAChDrL,EAAS8M,EAAU/S,SACrBwS,EAAYS,EAAY,IAAIlT,KAAKgT,EAAU/S,QAEzCiG,EAAS+M,EAAUhT,SACrB8S,EAAYG,EAAY,IAAIlT,KAAKiT,EAAUhT,YAhBvB,CACtB,MAAMkT,EACH7K,EAAyB8G,eAAiBgE,WAAW7B,GACnDpR,EAAkB6S,EAAU/S,SAC/BwS,EAAYU,EAAcH,EAAU/S,OAEjCE,EAAkB8S,EAAUhT,SAC/B8S,EAAYI,EAAcF,EAAUhT,OAaxC,IAAIwS,GAAaM,KACfP,IACIC,EACFO,EAAUtK,QACVuK,EAAUvK,QACVxG,EACAA,IAEG8G,GAEH,OADAiJ,EAAiBlJ,EAAMlI,GAAO6H,SACvBK,EAKb,IAAK2I,GAAaC,KAAeS,GAAWlM,EAASqL,GAAa,CAChE,MAAM8B,EAAkBP,GAAmBpB,GACrC4B,EAAkBR,GAAmBnB,GACrCc,GACHtS,EAAkBkT,EAAgBpT,QACnCsR,EAAWnO,OAASiQ,EAAgBpT,MAChC8S,GACH5S,EAAkBmT,EAAgBrT,QACnCsR,EAAWnO,OAASkQ,EAAgBrT,MAEtC,IAAIwS,GAAaM,KACfP,EACEC,EACAY,EAAgB3K,QAChB4K,EAAgB5K,UAEbM,GAEH,OADAiJ,EAAiBlJ,EAAMlI,GAAO6H,SACvBK,EAKb,GAAI+I,IAAYM,GAAWlM,EAASqL,GAAa,CAC/C,MAAQtR,MAAOsT,EAAY7K,QAAEA,GAAYoK,GAAmBhB,GAE5D,GAAIT,GAAQkC,KAAkBhC,EAAWiC,MAAMD,KAC7CxK,EAAMlI,kBACJf,KAAMoC,EACNwG,QAAAA,EACAJ,IAAAA,GACG+J,EAAkBnQ,EAAgCwG,KAElDM,GAEH,OADAiJ,EAAiBvJ,GACVK,EAKb,GAAIgJ,EACF,GAAItF,GAAWsF,GAAW,CACxB,MACM0B,EAAgBvC,SADDa,EAASR,GACiBS,GAE/C,GAAIyB,IACF1K,EAAMlI,kCACD4S,GACApB,EACDnQ,EACAuR,EAAc/K,WAGbM,GAEH,OADAiJ,EAAiBwB,EAAc/K,SACxBK,OAGN,GAAIvI,EAASuR,GAAW,CAC7B,IAAI2B,EAAmB,GAEvB,IAAK,MAAM5R,KAAOiQ,EAAU,CAC1B,IAAKxO,EAAcmQ,KAAsB1K,EACvC,MAGF,MAAMyK,EAAgBvC,SACda,EAASjQ,GAAKyP,GACpBS,EACAlQ,GAGE2R,IACFC,iCACKD,GACApB,EAAkBvQ,EAAK2R,EAAc/K,UAG1CuJ,EAAiBwB,EAAc/K,SAE3BM,IACFD,EAAMlI,GAAQ6S,IAKpB,IAAKnQ,EAAcmQ,KACjB3K,EAAMlI,kBACJyH,IAAK0J,GACF0B,IAEA1K,GACH,OAAOD,EAOf,OADAkJ,GAAiB,GACVlJ,GCpKT,MAAM4K,GAAiB,CACrBjG,KAAMzL,EACN2R,eAAgB3R,EAChB4R,kBAAkB,GAGdC,GAAsC,oBAAX7F,gBAEjB8F,GAIdhQ,EAA8C,IAE9C,IAgCIiQ,EAhCAlM,iCACC6L,IACA5P,GAEDiB,EAAsC,CACxCE,SAAS,EACTG,cAAc,EACdF,YAAa,GACb8O,aAAa,EACbC,YAAa,EACb9O,cAAe,GACf+O,cAAc,EACdC,oBAAoB,EACpB9O,SAAS,EACTC,OAAQ,IAENmC,EAAU,GACVN,EAAiBU,EAAS4I,eAAiB,GAC3C/J,EAAcmB,EAASd,iBACvB,GACAuF,GAAYnF,GACZW,EAAc,CAChBC,QAAQ,EACRJ,OAAO,EACPzB,OAAO,GAELJ,EAAgB,CAClB6B,MAAO,IAAI4E,IACX6H,QAAS,IAAI7H,IACbrF,MAAO,IAAIqF,IACXrG,MAAO,IAAIqG,KAGT8H,EAAQ,EACRC,EAAoD,GACxD,MAAM5R,EAAkB,CACtBuC,SAAS,EACTC,aAAa,EACbC,eAAe,EACfC,cAAc,EACdC,SAAS,EACTC,QAAQ,GAEJI,EAAoC,CACxCQ,MAAOuG,KACPvF,MAAOuF,KACP9G,MAAO8G,MAGH8H,EAA6BC,GAAmB3M,EAAS4F,MACzDgH,EAA4BD,GAAmB3M,EAAS8L,gBACxDe,EACJ7M,EAAS8M,eAAiB3S,EAStB4S,EAAevD,MAAOwD,IAC1B,IAAIxP,GAAU,EAed,OAbI3C,EAAgB2C,UAClBA,EAAUwC,EAASiN,SACfxR,SAAqByR,KAAkBzP,cACjC0P,EAAyBvN,GAAS,GAEvCoN,GAAoBxP,IAAYN,EAAWM,UAC9CN,EAAWM,QAAUA,EACrBK,EAAUC,MAAMrB,KAAK,CACnBe,QAAAA,MAKCA,GA+CH4P,EAAe,CAACrU,EAAyBkI,KAC7CO,EAAItE,EAAWO,OAAQ1E,EAAMkI,GAC7BpD,EAAUC,MAAMrB,KAAK,CACnBgB,OAAQP,EAAWO,UAIjB4P,EAAsB,CAC1BtU,EACAuU,EACA9M,KAEA,MAAMb,EAAevE,EAAIwE,EAAS7G,GAElC,GAAI4G,EAAO,CACT,MAAMhG,EAAeyB,EAAIyD,EAAa9F,EAAMqC,EAAIkE,EAAgBvG,IAEhEkB,EAAYN,IACX6G,GAAQA,EAAyB+M,gBAClCD,EACI9L,EACE3C,EACA9F,EACAuU,EAAuB3T,EAAeiO,GAAcjI,EAAME,KAE5D2N,EAAczU,EAAMY,GAG1BsG,EAAYH,OAASiN,KAGjBU,EAAsB,CAC1B1U,EACA2U,EACAC,EACAC,GAAe,KAIf,IAAIC,GAAe,EACnB,MAAM7K,EAA8D,CAClEjK,KAAAA,GAEI+U,EAAyB1S,EAAI8B,EAAWI,cAAevE,GAE7D,GAAI8B,EAAgBuC,QAAS,CAC3B,MAAM2Q,EAAsB7Q,EAAWE,QAEvCF,EAAWE,QAAU4F,EAAO5F,QAAU4Q,IACtCH,EAAeE,IAAwB/K,EAAO5F,QAGhD,GAAIvC,EAAgBwC,cAAgBsQ,EAAkB,CACpD,MAAMM,EAAuB7S,EAAI8B,EAAWG,YAAatE,GAC1BmM,GAC7B9J,EAAIkE,EAAgBvG,GACpB2U,GAIEnH,GAAMrJ,EAAWG,YAAatE,GAC9ByI,EAAItE,EAAWG,YAA6BtE,GAAM,GACtDiK,EAAO3F,YAAcH,EAAWG,YAChCwQ,EACEA,GACAI,IAAyB7S,EAAI8B,EAAWG,YAAatE,GAczD,OAXI4U,IAAqBG,IACvBtM,EAAItE,EAAWI,cAA+BvE,EAAM4U,GACpD3K,EAAO1F,cAAgBJ,EAAWI,cAClCuQ,EACEA,GACChT,EAAgByC,eACfwQ,IAA2BH,GAGjCE,GAAgBD,GAAgB/P,EAAUC,MAAMrB,KAAKuG,GAE9C6K,EAAe7K,EAAS,IAG3BkL,EAAwB,CAACnV,EAAWZ,KACxCqJ,EACEtE,EAAWG,YACXtE,EACAoV,GACEhW,EACAiD,EAAIkE,EAAgBvG,EAAM,IAC1BqC,EAAI8B,EAAWG,YAAatE,EAAM,MAGtCqV,GAAgBlR,EAAWG,YAAatE,IAGpCsV,EAAsB7E,MAC1BwD,EACAjU,EACAyE,EACAyD,EACAH,KAMA,MAAMwN,EAAqBlT,EAAI8B,EAAWO,OAAQ1E,GAC5CwV,EACJ1T,EAAgB2C,SAAWN,EAAWM,UAAYA,EAjLpD,IAAqBd,EAAa8R,EA8LlC,GAXIvS,EAAMwS,YAAcxN,GACtBiL,EACEA,IArLiBxP,EAqLc0Q,EArLDoB,EAqLevS,EAAMwS,WApLvD,IAAIC,KACFC,aAAanC,GACbA,EAAQrG,OAAOyI,WAAW,IAAMlS,KAAYgS,GAAOF,KAmLnDtC,EAAmBnT,EAAMkI,KAEzB0N,aAAanC,GACbvL,EACIO,EAAItE,EAAWO,OAAQ1E,EAAMkI,GAC7BsF,GAAMrJ,EAAWO,OAAQ1E,MAI3BkI,GAASiE,GAAUoJ,EAAoBrN,GAASqN,KAC/C7S,EAAcqF,IACfyN,KACDvB,EACD,CACA,MAAM6B,+CACD/N,GACCyN,EAAoB,CAAE/Q,QAAAA,GAAY,KACtCC,OAAQP,EAAWO,OACnB1E,KAAAA,IAGFmE,iCACKA,GACA2R,GAGLhR,EAAUC,MAAMrB,KAAKoS,GAGvBpC,EAAe1T,KAEX8B,EAAgB0C,eAAiBkP,EAAe1T,KAClD8E,EAAUC,MAAMrB,KAAK,CACnBc,cAAc,IAEhBkP,EAAiB,KAIfS,EAAiB1D,MAAOzQ,GAC5BiH,EAASiN,eACCjN,EAASiN,SACb/R,iBAAK2D,GACLmB,EAAS8O,QC9WJ,EACb1M,EACAxC,EACAkN,EACApD,KAEA,MAAMvH,EAAiD,GAEvD,IAAK,MAAMpJ,KAAQqJ,EAAa,CAC9B,MAAMzC,EAAevE,EAAIwE,EAAS7G,GAElC4G,GAAS6B,EAAIW,EAAQpJ,EAAM4G,EAAME,IAGnC,MAAO,CACLiN,aAAAA,EACAhU,MAAO,IAAIsJ,GACXD,OAAAA,EACAuH,0BAAAA,ID6VMqF,CACEhW,GAAQkF,EAAO6B,MACfF,EACAI,EAAS8M,aACT9M,EAAS0J,4BAGZ,GAmBDyD,EAA2B3D,MAC/BrH,EACA6M,EACAF,EAAU,CACRG,OAAO,MAGT,IAAK,MAAMlW,KAAQoJ,EAAQ,CACzB,MAAMxC,EAAQwC,EAAOpJ,GAErB,GAAI4G,EAAO,CACT,MAAMuP,EAAiBvP,EAAME,GACvB6N,EAAalS,EAAKmE,EAAO,MAE/B,GAAIuP,EAAgB,CAClB,MAAMC,QAAmBC,GACvBzP,EACAvE,EAAIyD,EAAaqQ,EAAenW,MAChC8T,EACA7M,EAAS0J,2BAGX,GAAIyF,EAAWD,EAAenW,QAC5B+V,EAAQG,OAAQ,EAEZD,GACF,MAICA,IACHG,EAAWD,EAAenW,MACtByI,EACEtE,EAAWO,OACXyR,EAAenW,KACfoW,EAAWD,EAAenW,OAE5BwN,GAAMrJ,EAAWO,OAAQyR,EAAenW,OAIhD2U,SACSP,EACLO,EACAsB,EACAF,IAKR,OAAOA,EAAQG,OAiBXjB,EAAwB,CAACjV,EAAMd,KACnCc,GAAQd,GAAQuJ,EAAI3C,EAAa9F,EAAMd,IACtCiN,GAAUmK,IAAa/P,IAGpBP,EAAyC,CAC7CjG,EACAa,EACAwE,KAEA,MAAMQ,mBACAsB,EAAYH,MACZjB,EACA5E,EAAYN,GACZ2F,EACAlB,EAAStF,GACT,CAAEsI,CAACtI,GAAQa,GACXA,GAGN,OAAOqE,EAAoBlF,EAAOmF,EAAQU,EAAaR,IAUnDqP,EAAgB,CACpBzU,EACAZ,EACAmK,EAA0B,MAE1B,MAAM3C,EAAevE,EAAIwE,EAAS7G,GAClC,IAAI2U,EAAsBvV,EAE1B,GAAIwH,EAAO,CACT,MAAMuP,EAAiBvP,EAAME,GAEzBqP,IACF1N,EAAI3C,EAAa9F,EAAMuP,GAAgBnQ,EAAO+W,IAE9CxB,EACE4B,IAASjJ,GAAc6I,EAAe1O,MAAQnI,EAAkBF,GAC5D,GACAA,EAEF2P,GAAYoH,EAAe1O,OAASpC,EAASsP,GAC/CwB,EAAe1O,IAAIuH,MAAQ2F,EAClBxF,GAAiBgH,EAAe1O,KACzC,IAAI0O,EAAe1O,IAAI8B,SAASiN,QAC7BC,GACEA,EAAUC,SACT/B,EACAhI,SAAS8J,EAAUrX,QAEhB+W,EAAe7M,KACpBzJ,EAAgBsW,EAAe1O,KACjC0O,EAAe7M,KAAK/G,OAAS,EACzB4T,EAAe7M,KAAKkN,QACjBG,GACEA,EAAY7W,QAAUP,MAAMC,QAAQmV,KAC9BA,EAAkBhS,KAClBzD,GAAiBA,IAASyX,EAAYvX,OAEzCuV,IAAegC,EAAYvX,OAElC+W,EAAe7M,KAAK,GAAGxJ,UAAY6U,EAExCwB,EAAe7M,KAAKkN,QACjBI,GACEA,EAAS9W,QAAU8W,EAASxX,QAAUuV,GAI7CwB,EAAe1O,IAAIrI,MAAQuV,IAKhCpL,EAAQsN,aAAetN,EAAQuN,cAC9BpC,EAAoB1U,EAAM2U,EAAYpL,EAAQuN,aAEhDvN,EAAQwN,gBAAkBC,EAAQhX,IAG9BiX,EAAY,CAKhBjX,EACAZ,EACAmK,KAEA,IAAK,MAAM2N,KAAY9X,EAAO,CAC5B,MAAMuV,EAAavV,EAAM8X,GACnBzR,EAAY,GAAGzF,KAAQkX,IACvBtQ,EAAQvE,EAAIwE,EAASpB,IAE1BP,EAAOoB,MAAMsD,IAAI5J,IACfsM,GAAYqI,MACZ/N,GAAUA,EAAME,KAClBrH,EAAakV,GAEVF,EAAchP,EAAWkP,EAAYpL,GADrC0N,EAAUxR,EAAWkP,EAAYpL,KAKnC4N,EAA0C,CAC9CnX,EACAZ,EACAmK,EAAU,MAEV,MAAM3C,EAAQvE,EAAIwE,EAAS7G,GACrBoX,EAAelS,EAAOoB,MAAMsD,IAAI5J,GAEtCyI,EAAI3C,EAAa9F,EAAMZ,GAEnBgY,GACFtS,EAAUwB,MAAM5C,KAAK,CACnB1D,KAAAA,EACA6F,OAAQC,KAIPhE,EAAgBuC,SAAWvC,EAAgBwC,cAC5CiF,EAAQsN,cAER1B,EAAsBnV,EAAMZ,GAE5B0F,EAAUC,MAAMrB,KAAK,CACnB1D,KAAAA,EACAsE,YAAaH,EAAWG,YACxBD,QAAS4Q,EAAUjV,EAAMZ,QAI7BwH,GAAUA,EAAME,IAAOxH,EAAkBF,GAErCqV,EAAczU,EAAMZ,EAAOmK,GAD3B0N,EAAUjX,EAAMZ,EAAOmK,GAI7B8N,EAAUrX,EAAMkF,IAAWJ,EAAUC,MAAMrB,KAAK,IAChDoB,EAAUQ,MAAM5B,KAAK,CACnB1D,KAAAA,KAIEsX,EAA8B7G,MAAO/Q,IACzC,MAAME,EAASF,EAAME,OACrB,IAAII,EAAOJ,EAAOI,KAClB,MAAM4G,EAAevE,EAAIwE,EAAS7G,GAElC,GAAI4G,EAAO,CACT,IAAIsB,EACAzD,EACJ,MAAMkQ,EAAa/U,EAAOX,KAAO4P,GAAcjI,EAAME,IAAMlH,EAAOR,MAC5DuK,EAAcjK,EAAMT,OAASkC,EAC7BoW,KErnBIhO,EFsnBQ3C,EAAME,IErnBpBC,QACPwC,EAAQqH,UACPrH,EAAQwH,KACRxH,EAAQyH,KACRzH,EAAQsH,WACRtH,EAAQuH,WACRvH,EAAQ0H,SACR1H,EAAQ2H,WF+mBDjK,EAASiN,UACT7R,EAAI8B,EAAWO,OAAQ1E,IACvB4G,EAAME,GAAG0Q,OG3nBL,EACb7N,EACA1B,EACAmL,EACAL,EAIAlG,KAQIA,EAAKI,WAEGmG,GAAevG,EAAKK,YACrBjF,GAAa0B,IACbyJ,EAAcL,EAAehG,SAAWF,EAAKE,WAC9CpD,IACCyJ,EAAcL,EAAe/F,WAAaH,EAAKG,aACjDrD,GHqmBH8N,CACE9N,EACAtH,EAAI8B,EAAWI,cAAevE,GAC9BmE,EAAWiP,YACXS,EACAF,GAEE+D,EAAUL,EAAUrX,EAAMkF,EAAQyE,GAEpCA,EACF/C,EAAME,GAAGU,QAAUZ,EAAME,GAAGU,OAAO9H,GAC1BkH,EAAME,GAAGQ,UAClBV,EAAME,GAAGQ,SAAS5H,GAGpB+I,EAAI3C,EAAa9F,EAAM2U,GAEvB,MAAM5M,EAAa2M,EACjB1U,EACA2U,EACAhL,GACA,GAGIkL,GAAgBnS,EAAcqF,IAAe2P,EAQnD,IANC/N,GACC7E,EAAUQ,MAAM5B,KAAK,CACnB1D,KAAAA,EACAf,KAAMS,EAAMT,OAGZsY,EACF,OACE1C,GACA/P,EAAUC,MAAMrB,oBAAO1D,KAAAA,GAAU0X,EAAU,GAAK3P,IAapD,IATC4B,GAAe+N,GAAW5S,EAAUC,MAAMrB,KAAK,IAEhDgQ,EAAe1T,IAAQ0T,EAAe1T,GAAQ,GAE9C8B,EAAgB0C,cACdM,EAAUC,MAAMrB,KAAK,CACnBc,cAAc,IAGdyC,EAASiN,SAAU,CACrB,MAAMxP,OAAEA,SAAiByP,EAAe,CAACnU,IACnC2X,EAA4BnI,GAChCrL,EAAWO,OACXmC,EACA7G,GAEI4X,EAAoBpI,GACxB9K,EACAmC,EACA8Q,EAA0B3X,MAAQA,GAGpCkI,EAAQ0P,EAAkB1P,MAC1BlI,EAAO4X,EAAkB5X,KAEzByE,EAAU/B,EAAcgC,QAExBwD,SACQmO,GACJzP,EACAvE,EAAIyD,EAAa9F,GACjB8T,EACA7M,EAAS0J,4BAEX3Q,GAEFyE,QAAgBuP,GAAa,GAG/BpN,EAAME,GAAG0Q,MAAQR,EAAQpQ,EAAME,GAAG0Q,MAElClC,GAAoB,EAAOtV,EAAMyE,EAASyD,EAAOH,GE1sBxC,IAACwB,GF8sBRyN,EAAwCvG,MAAOzQ,EAAMuJ,EAAU,MACnE,IAAI9E,EACAoO,EACJ,MAAMgF,EAAa/U,EAAsB9C,GAMzC,GAJA8E,EAAUC,MAAMrB,KAAK,CACnBc,cAAc,IAGZyC,EAASiN,SAAU,CACrB,MAAMxP,OAxV0B+L,OAAO1Q,IACzC,MAAM2E,OAAEA,SAAiByP,IAEzB,GAAIpU,EACF,IAAK,MAAMC,KAAQD,EAAO,CACxB,MAAMmI,EAAQ7F,EAAIqC,EAAQ1E,GAC1BkI,EACIO,EAAItE,EAAWO,OAAQ1E,EAAMkI,GAC7BsF,GAAMrJ,EAAWO,OAAQ1E,QAG/BmE,EAAWO,OAASA,EAGtB,OAAOA,GA0UgBoT,CACnB5W,EAAYlB,GAAQA,EAAO6X,GAG7BpT,EAAU/B,EAAcgC,GACxBmO,EAAmB7S,GACd6X,EAAW5X,KAAMD,GAASqC,EAAIqC,EAAQ1E,IACvCyE,OACKzE,GACT6S,SACQkF,QAAQC,IACZH,EAAWrS,IAAIiL,MAAOhL,IACpB,MAAMmB,EAAQvE,EAAIwE,EAASpB,GAC3B,aAAa2O,EACXxN,GAASA,EAAME,GAAK,CAAEuB,CAAC5C,GAAYmB,GAAUA,OAInDkI,MAAMvO,UACLsS,GAAqB1O,EAAWM,UAAYuP,KAE/CnB,EAAmBpO,QAAgB2P,EAAyBvN,GAqB9D,OAlBA/B,EAAUC,MAAMrB,mDACT2B,EAASrF,IACb8B,EAAgB2C,SAAWA,IAAYN,EAAWM,QAC/C,GACA,CAAEzE,KAAAA,IACFiH,EAASiN,SAAW,CAAEzP,QAAAA,GAAY,KACtCC,OAAQP,EAAWO,OACnBF,cAAc,KAGhB+E,EAAQC,cACLqJ,GACD1J,EACEtC,EACC5F,GAAQoB,EAAI8B,EAAWO,OAAQzD,GAChCjB,EAAO6X,EAAa3S,EAAO6B,OAGxB8L,GAGHyD,EACJuB,IAIA,MAAMhS,iCACDU,GACCW,EAAYH,MAAQjB,EAAc,IAGxC,OAAO5E,EAAY2W,GACfhS,EACAR,EAASwS,GACTxV,EAAIwD,EAAQgS,GACZA,EAAWrS,IAAKxF,GAASqC,EAAIwD,EAAQ7F,KAyDrCoH,EAA8C,CAACpH,EAAMuJ,EAAU,MACnE,IAAK,MAAM9D,KAAazF,EAAO8C,EAAsB9C,GAAQkF,EAAO6B,MAClE7B,EAAO6B,MAAMkR,OAAOxS,GACpBP,EAAOoB,MAAM2R,OAAOxS,GAEhBpD,EAAIwE,EAASpB,KACV8D,EAAQ2O,YACX1K,GAAM3G,EAASpB,GACf+H,GAAM1H,EAAaL,KAGpB8D,EAAQ4O,WAAa3K,GAAMrJ,EAAWO,OAAQe,IAC9C8D,EAAQ6O,WAAa5K,GAAMrJ,EAAWG,YAAamB,IACnD8D,EAAQ8O,aAAe7K,GAAMrJ,EAAWI,cAAekB,IACvDwB,EAASd,mBACPoD,EAAQlC,kBACTmG,GAAMjH,EAAgBd,IAI5BX,EAAUQ,MAAM5B,KAAK,IAErBoB,EAAUC,MAAMrB,oCACXS,GACEoF,EAAQ6O,UAAiB,CAAE/T,QAAS4Q,KAAhB,MAG1B1L,EAAQ+O,aAAetE,KAGpBvN,EAA0C,CAACzG,EAAMuJ,EAAU,MAC/D,MAAM3C,EAAQvE,EAAIwE,EAAS7G,GA2B3B,OAzBAyI,EAAI5B,EAAS7G,EAAM,CACjB8G,gDACMF,GAASA,EAAME,GAAKF,EAAME,GAAK,CAAEW,IAAK,CAAEzH,KAAAA,MAC5CA,KAAAA,EACA+G,OAAO,IACJwC,KAGPrE,EAAO6B,MAAMxB,IAAIvF,IAEhBkB,EAAYqI,EAAQnK,SAClBmK,EAAQhG,UACTkF,EAAI3C,EAAa9F,EAAMqC,EAAIyD,EAAa9F,EAAMuJ,EAAQnK,QAExDwH,EACIsH,GAAU3E,EAAQhG,WAClBkF,EACE3C,EACA9F,EACAuJ,EAAQhG,cACJ9C,EACA4B,EAAIyD,EAAa9F,EAAM6O,GAAcjI,EAAME,MAEjDwN,EAAoBtU,GAAM,GAEvBiT,GACF,CAAEjT,KAAMA,gCAEPA,KAAAA,GACIkO,GAAU3E,EAAQhG,UAClB,CAAEA,SAAUgG,EAAQhG,UACpB,KACJ+D,SAAUgQ,EACV9P,OAAQ8P,EACR7P,IAAMA,IACJ,GAAIA,EAAK,CACPhB,EAASzG,EAAMuJ,GACf,IAAI3C,EAAevE,EAAIwE,EAAS7G,GAChC,MAAMuY,EAAWrX,EAAYuG,EAAIrI,QAC7BqI,EAAI+Q,kBACD/Q,EAAI+Q,iBAAiB,yBAAyB,IAGjD/Q,EAEE6J,EIv5BL,CAAC7J,GACdwH,GAAaxH,IAAQ5H,EAAgB4H,GJs5BCgR,CAA0BF,GAEpD,GACEA,IAAa3R,EAAME,GAAGW,KACrB6J,GACCxQ,EAAQ8F,EAAME,GAAGwC,MAAQ,IAAI3G,KAC1B0L,GAAWA,IAAWkK,GAG3B,OAGF3R,EAAQ,CACNE,GAAIwK,iCAEK1K,EAAME,KACTwC,KAAM,IACDxI,EAAQ8F,EAAME,GAAGwC,MAAQ,IAAIhJ,OAAOoY,IACvCH,GAEF9Q,IAAK,CAAExI,KAAMsZ,EAAStZ,KAAMe,KAAAA,oCAGzB4G,EAAME,KACTW,IAAK8Q,KAIb9P,EAAI5B,EAAS7G,EAAM4G,KAEjB2C,IAAYA,EAAQhG,WACpB+Q,EAAoBtU,GAAM,EAAOuY,OAC9B,CACL,MAAM3R,EAAevE,EAAIwE,EAAS7G,EAAM,IAClCmG,EACJc,EAASd,kBAAoBoD,EAAQpD,iBAEnCS,EAAME,KACRF,EAAME,GAAGC,OAAQ,GAGnBZ,KAEIE,EAAmBnB,EAAOoB,MAAOtG,KAASkH,EAAYC,SAExDjC,EAAOsO,QAAQjO,IAAIvF,QA+LjC,MAAO,CACLgE,QAAS,CACPyC,SAAAA,EACAW,WAAAA,EACA+M,eAAAA,EACAnO,UAAAA,EACAiP,UAAAA,EACAjB,aAAAA,EACA/N,iBAxsBqB,KACvB,IAAK,MAAMjG,KAAQkF,EAAOsO,QAAS,CACjC,MAAM5M,EAAevE,EAAIwE,EAAS7G,GAElC4G,IACGA,EAAME,GAAGwC,KACN1C,EAAME,GAAGwC,KAAKwF,MAAOrH,IAASiR,GAAKjR,KAClCiR,GAAK9R,EAAME,GAAGW,OACnBL,EAAWpH,GAGfkF,EAAOsO,QAAU,IAAI7H,KA8rBnBgN,kBAj+B6C,CAC/C3Y,EACA4Y,EACAjD,EACA9P,EAAS,GACTgT,GAAkB,EAClBC,GAAkB,KAIlB,GAFA5R,EAAYC,QAAS,EAEjB2R,GAAmBzW,EAAIwE,EAAS7G,GAAO,CACzC,MAAM4F,EAAcgT,EAAOvW,EAAIwE,EAAS7G,GAAO2V,EAAKoD,KAAMpD,EAAKqD,MAC/DH,GAAmBpQ,EAAI5B,EAAS7G,EAAM4F,GAGxC,GAAIrG,MAAMC,QAAQ6C,EAAI8B,EAAWO,OAAQ1E,IAAQ,CAC/C,MAAM0E,EAASkU,EAAOvW,EAAI8B,EAAWO,OAAQ1E,GAAO2V,EAAKoD,KAAMpD,EAAKqD,MACpEH,GAAmBpQ,EAAItE,EAAWO,OAAQ1E,EAAM0E,GAChD2Q,GAAgBlR,EAAWO,OAAQ1E,GAGrC,GAAI8B,EAAgByC,eAAiBlC,EAAI8B,EAAWI,cAAevE,GAAO,CACxE,MAAMuE,EAAgBqU,EACpBvW,EAAI8B,EAAWI,cAAevE,GAC9B2V,EAAKoD,KACLpD,EAAKqD,MAEPH,GACEpQ,EAAItE,EAAWI,cAA+BvE,EAAMuE,GACtD8Q,GAAgBlR,EAAWI,cAAevE,IAGxC8B,EAAgBwC,aAAexC,EAAgBuC,UACjD8Q,EAAsBnV,EAAM6F,GAG9Bf,EAAUC,MAAMrB,KAAK,CACnBW,QAAS4Q,EAAUjV,EAAM6F,GACzBvB,YAAaH,EAAWG,YACxBI,OAAQP,EAAWO,OACnBD,QAASN,EAAWM,WA07BpBwU,eArqBoBjZ,GACtBqC,EACE6E,EAAYH,MAAQjB,EAAcS,EAClCvG,EACAkD,EAAMiD,iBAAmB9D,EAAIkE,EAAgBvG,EAAM,IAAM,IAkqBzD8E,UAAAA,EACAhD,gBAAAA,EACA+E,cACE,OAAOA,GAETA,YAAYzH,GACVyH,EAAUzH,GAEZ0G,kBACE,OAAOA,GAETA,gBAAgB1G,GACd0G,EAAc1G,GAEhB8H,kBACE,OAAOA,GAETA,gBAAgB9H,GACd8H,EAAc9H,GAEhBmH,qBACE,OAAOA,GAETA,mBAAmBnH,GACjBmH,EAAiBnH,GAEnB8F,aACE,OAAOA,GAETA,WAAW9F,GACT8F,EAAS9F,GAEX+E,iBACE,OAAOA,GAETA,eAAe/E,GACb+E,EAAa/E,GAEf6H,eACE,OAAOA,GAETA,aAAa7H,GACX6H,iCACKA,GACA7H,KAIT4X,QAAAA,EACAvQ,SAAAA,EACAyS,aArPA,CAACC,EAASC,IAAc3I,MAAO4I,IACzBA,IACFA,EAAEC,gBAAkBD,EAAEC,iBACtBD,EAAEE,SAAWF,EAAEE,WAEjB,IAAIC,GAAoB,EACpB5T,EAAmBqB,EAASd,iBAC5BuF,GAAY5F,oBACPA,GAEThB,EAAUC,MAAMrB,KAAK,CACnB4P,cAAc,IAGhB,IACE,GAAIrM,EAASiN,SAAU,CACrB,MAAMxP,OAAEA,EAAMmB,OAAEA,SAAiBsO,IACjChQ,EAAWO,OAASA,EACpBkB,EAAcC,aAERuO,EAAyBvN,GAI/BnE,EAAcyB,EAAWO,SACzBvC,OAAOG,KAAK6B,EAAWO,QAAQoK,MAAO9O,GAASqC,EAAIuD,EAAa5F,KAEhE8E,EAAUC,MAAMrB,KAAK,CACnBgB,OAAQ,GACR4O,cAAc,UAEV6F,EAAQvT,EAAayT,KAE3BD,SAAoBA,EAAUjV,EAAWO,OAAQ2U,GACjDpS,EAAS+L,kBACP7J,EACEtC,EACC5F,GAAQoB,EAAI8B,EAAWO,OAAQzD,GAChCiE,EAAO6B,QAGb,MAAO0S,GAEP,MADAD,GAAoB,EACdC,UAENtV,EAAWiP,aAAc,EACzBtO,EAAUC,MAAMrB,KAAK,CACnB0P,aAAa,EACbE,cAAc,EACdC,mBACE7Q,EAAcyB,EAAWO,SAAW8U,EACtCnG,YAAalP,EAAWkP,YAAc,EACtC3O,OAAQP,EAAWO,WAkMzBY,MAhZwC,CACxCtF,EAIAY,IAEAgL,GAAW5L,GACP8E,EAAUQ,MAAM7B,UAAU,CACxBC,KAAOgW,GACL1Z,EACEgG,OACEvF,EACAG,GAEF8Y,KAGN1T,EACEhG,EACAY,GACA,GA4XNuW,SAAAA,EACAb,UAAAA,EACAqD,MArKwC,CACxCxU,EACAyU,EAAmB,MAEnB,MAAMC,EAAgB1U,GAAcoB,EAC9BuT,EAAqBpO,GAAYmO,GACjChU,EAAUnD,EAAcyC,GAE1BoB,EADAuT,EAOJ,GAJKF,EAAiBG,oBACpBxT,EAAiBsT,IAGdD,EAAiBI,WAAY,CAChC,GAAIzD,GACF,IAAK,MAAMvW,KAAQkF,EAAO6B,MAAO,CAC/B,MAAMH,EAAQvE,EAAIwE,EAAS7G,GAC3B,GAAI4G,GAASA,EAAME,GAAI,CACrB,MAAMqP,EAAiB5W,MAAMC,QAAQoH,EAAME,GAAGwC,MAC1C1C,EAAME,GAAGwC,KAAK,GACd1C,EAAME,GAAGW,IAEb,IACE6F,GAAc6I,IACZA,EAAe8D,QAAQ,QAASN,QAClC,MACA,YAKR7T,EAAc5C,EAAMiD,iBAChByT,EAAiBG,kBACfrO,GAAYnF,GACZ,GACFuT,EACJjT,EAAU,GAEV/B,EAAUQ,MAAM5B,KAAK,CACnBmC,OAAAA,IAGFf,EAAUwB,MAAM5C,KAAK,CACnBmC,OAAAA,IAIJX,EAAS,CACP6B,MAAO,IAAI4E,IACX6H,QAAS,IAAI7H,IACbrF,MAAO,IAAIqF,IACXrG,MAAO,IAAIqG,IACXjG,UAAU,EACViC,MAAO,IAGT7C,EAAUC,MAAMrB,KAAK,CACnB2P,YAAauG,EAAiBM,gBAC1B/V,EAAWkP,YACX,EACJhP,QAASuV,EAAiBxB,UACtBjU,EAAWE,UACXuV,EAAiBG,oBAChB5N,GAAUhH,EAAYoB,GAE3B6M,cAAawG,EAAiBO,iBAC1BhW,EAAWiP,YAEf9O,YAAasV,EAAiBxB,UAC1BjU,EAAWG,YACTsV,EAAiBG,mBAAqB5U,EACpChD,OAAOiY,QAAQjV,GAAYnE,OACzB,CAAC4N,GAAW3N,EAAK7B,oCACZwP,IACHvG,CAACpH,GAAM7B,IAAUiD,EAAIkE,EAAgBtF,KAEvC,IAEF,GACRsD,cAAeqV,EAAiBvB,YAC5BlU,EAAWI,cACV,GACLG,OAAQkV,EAAiBS,WACrBlW,EAAWO,OACV,GACL4O,cAAc,EACdC,oBAAoB,IAGtBrM,EAAYH,OACTjF,EAAgB2C,WAAamV,EAAiBtB,YACjDpR,EAAY5B,QAAUpC,EAAMiD,kBA0E5BmU,WAjMkD,CAACta,EAAMuJ,EAAU,MAC/DrI,EAAYqI,EAAQ3I,cACtBuW,EAASnX,EAAMqC,EAAIkE,EAAgBvG,KAEnCmX,EAASnX,EAAMuJ,EAAQ3I,cACvB6H,EAAIlC,EAAgBvG,EAAMuJ,EAAQ3I,eAG/B2I,EAAQ8O,aACX7K,GAAMrJ,EAAWI,cAAevE,GAG7BuJ,EAAQ6O,YACX5K,GAAMrJ,EAAWG,YAAatE,GAC9BmE,EAAWE,QAAUkF,EAAQ3I,aACzBqU,EAAUjV,EAAMqC,EAAIkE,EAAgBvG,IACpCiV,KAGD1L,EAAQ4O,YACX3K,GAAMrJ,EAAWO,OAAQ1E,GACzB8B,EAAgB2C,SAAWuP,KAG7BlP,EAAUC,MAAMrB,sBAAUS,KA0K1BoW,YAnbqDva,IACrDA,EACI8C,EAAsB9C,GAAMwW,QAASgE,GACnChN,GAAMrJ,EAAWO,OAAQ8V,IAE1BrW,EAAWO,OAAS,GAEzBI,EAAUC,MAAMrB,KAAK,CACnBgB,OAAQP,EAAWO,OACnBD,SAAS,KA2aX2C,WAAAA,EACAqT,SAxa8C,CAACza,EAAMkI,EAAOqB,KAC5D,MAAM9B,GAAQpF,EAAIwE,EAAS7G,EAAM,CAAE8G,GAAI,KAAgBA,IAAM,IAAIW,IAEjEgB,EAAItE,EAAWO,OAAQ1E,iCAClBkI,IACHT,IAAAA,KAGF3C,EAAUC,MAAMrB,KAAK,CACnB1D,KAAAA,EACA0E,OAAQP,EAAWO,OACnBD,SAAS,IAGX8E,GAAWA,EAAQC,aAAe/B,GAAOA,EAAIE,OAASF,EAAIE,SA2Z1D+S,SA3E+C1a,IAC/C,MAAM4G,EAAQvE,EAAIwE,EAAS7G,GAAM8G,IAChCF,EAAMa,IAAIE,MAAQf,EAAMa,IAAMb,EAAM0C,KAAK,IAAI3B,6BK9nChDzE,GACGA,EAAMyX,OAAOzU,EAAmChD,yB9DQnDA,GAEAzB,gBAACD,EAAgBoZ,UACfxb,MAAOqD,EAAKS,EAAO,aAElBA,EAAM2X,2G+DiBT3X,IAEA,MAAMa,EAAUpC,KACVqC,QACJA,EAAUD,EAAQC,QAAOhE,KACzBA,EAAIgK,QACJA,EAAU,KAAgB7D,iBAC1BA,GACEjD,GACGkG,EAAQ0R,GAAarZ,EAAMyC,SAEhC6W,EAAO/W,EAAQiV,eAAejZ,GAAOgK,IACjCD,EAAYtI,EAAM2B,OAAOgG,GACzBzE,EAAQlD,EAAM2B,OAAOpD,GACrBgb,EAAYvZ,EAAM2B,QAAO,GAE/BuB,EAAMzE,QAAUF,EAChB+J,EAAU7J,QAAUkJ,EACpBpF,EAAQkB,OAAOoB,MAAMf,IAAIvF,GAEzBiD,EAAa,CACXU,SAAU,EAAGkC,OAAAA,EAAQ7F,KAAMib,MACrBA,IAAmBtW,EAAMzE,SAAY+a,GACvCH,EAAUC,EAAO1Y,EAAIwD,EAAQlB,EAAMzE,SAAU8J,KAGjDxG,QAASQ,EAAQc,UAAUwB,QAG7B,MAAM4U,EAAezZ,EAAM0Z,YAMvBC,IAEA,MAAMC,ECvEG,EACbjS,EACAY,IACGZ,EAAO5D,IAAI,CAACoB,EAAQ,KAAOnE,EAAKmE,EAAOoD,IDoENsR,CAC9BF,EACApR,GAIF,OAFAgR,EAAU9a,SAAU,EACpBuI,EAAIzE,EAAQ8B,YAAa9F,EAAMqb,GACxBA,GAET,CAACrX,EAAShE,EAAMgK,IA0OlB,OA3CAvI,EAAM4B,UAAU,KACdW,EAAQkD,YAAYC,QAAS,EAE7BkQ,EAAUrX,EAAMgE,EAAQkB,SAAWlB,EAAQc,UAAUC,MAAMrB,KAAK,IAE5DsX,EAAU9a,SACZ8D,EAAQmQ,eAAe,CAACnU,IAAOub,KAAM1a,IACnC,MAAMqH,EAAQ7F,EAAIxB,EAAO6D,OAAQ1E,GAE7BkI,GAASA,EAAMjJ,OAASoD,EAAI2B,EAAQG,WAAWO,OAAQ1E,KACzDyI,EAAIzE,EAAQG,WAAWO,OAAQ1E,EAAMkI,GACrClE,EAAQc,UAAUC,MAAMrB,KAAK,CAC3BgB,OAAQV,EAAQG,WAAWO,YAMnCV,EAAQc,UAAUQ,MAAM5B,KAAK,CAC3B1D,KAAAA,EACA6F,OAAQ7B,EAAQ8B,cAGlB9B,EAAQkB,OAAOyC,OACbwB,EAAanF,EAAQ6C,QAAU5F,GAC7BA,EAAI+B,WAAWgB,EAAQkB,OAAOyC,QAGlC3D,EAAQkB,OAAOyC,MAAQ,GAEvB3D,EAAQlC,gBAAgB2C,SAAWT,EAAQgQ,gBAC1C,CAAC5K,EAAQpJ,EAAMgE,EAASgG,IAE3BvI,EAAM4B,UAAU,MACbhB,EAAI2B,EAAQ8B,YAAa9F,IAASyI,EAAIzE,EAAQ8B,YAAa9F,EAAM,IAE3D,MACDgE,EAAQiD,SAASd,kBAAoBA,IACvCnC,EAAQoD,WAAWpH,KAGtB,CAACA,EAAMgE,EAASgG,EAAS7D,IAErB,CACLqV,KAAM/Z,EAAM0Z,YAzID,CAAC3P,EAAgBC,KAC5B,MAAM2P,EAAiCK,EACrCzX,EAAQiV,eAAejZ,GACvB+J,EACAC,GAEF0R,GAAYN,EAAgC5P,EAAQC,GACpDzH,EAAQ2U,kBACN3Y,EACA0b,GACA,CACE3C,KAAMvN,EACNwN,KAAMvN,GAERyP,EAAaE,IACb,GAEFN,EAAUM,IAwHoB,CAACF,EAAclb,EAAMgE,EAASgG,IAC5D2R,KAAMla,EAAM0Z,YAtHD,CAACtQ,EAAcC,KAC1B,MAAMsQ,EAAiCK,EACrCzX,EAAQiV,eAAejZ,GACvB+J,EACAC,GAEF4R,EAAYR,EAAgCvQ,EAAMC,GAClD9G,EAAQ2U,kBACN3Y,EACA4b,EACA,CACE7C,KAAMlO,EACNmO,KAAMlO,GAERoQ,EAAaE,IACb,GAEFN,EAAUM,IAqGoB,CAACF,EAAclb,EAAMgE,EAASgG,IAC5DgB,QAASvJ,EAAM0Z,YA9MD,CACd/b,EAGAmK,KAEA,MAAM6R,EAAiCS,GACrCJ,EAAczX,EAAQiV,eAAejZ,GAAO+J,EAAWC,GACvD+Q,EAAOjY,EAAsB1D,GAAQ4K,IAEvChG,EAAQ2U,kBACN3Y,EACA6b,GACA,CACE9C,KAAM+C,EAAe1c,IAEvB8b,EAAaE,IAEfN,EAAUM,GAEVpX,EAAQkB,OAAOyC,MAAQoU,EAAkB/b,EAAM,EAAGuJ,IA0Ld,CAAC2R,EAAclb,EAAMgE,EAASgG,IAClEW,OAAQlJ,EAAM0Z,YA3OD,CACb/b,EAGAmK,KAEA,MAAMyS,EAAclZ,EAAsB1D,GACpCgc,EAAiCa,EACrCR,EAAczX,EAAQiV,eAAejZ,GAAO+J,EAAWC,GACvD+Q,EAAOiB,EAAahS,IAEtBhG,EAAQ2U,kBACN3Y,EACAic,EACA,CACElD,KAAM+C,EAAe1c,IAEvB8b,EAAaE,IAEfN,EAAUM,GAEVpX,EAAQkB,OAAOyC,MAAQoU,EACrB/b,EACAob,EAA+B7Y,OAASyZ,EAAYzZ,OACpDgH,IAmNgC,CAAC2R,EAAclb,EAAMgE,EAASgG,IAChEkS,OAAQza,EAAM0Z,YAzLAxS,IACd,MAAMyS,EAEAe,GACJV,EAAczX,EAAQiV,eAAejZ,GAAO+J,EAAWC,GACvDrB,GAEF3E,EAAQ2U,kBACN3Y,EACAmc,GACA,CACEpD,KAAMpQ,GAERuS,EAAaE,IAEfN,EAAUM,IA0KwB,CAACF,EAAclb,EAAMgE,EAASgG,IAChEY,OAAQnJ,EAAM0Z,YAxKD,CACbxS,EACAvJ,EAGAmK,KAEA,MAAM6R,EAAiCgB,EACrCX,EAAczX,EAAQiV,eAAejZ,GAAO+J,EAAWC,GACvDrB,EACAoS,EAAOjY,EAAsB1D,GAAQ4K,IAEvChG,EAAQ2U,kBACN3Y,EACAoc,EACA,CACErD,KAAMpQ,EACNqQ,KAAM8C,EAAe1c,IAEvB8b,EAAaE,IAEfN,EAAUM,GAEVpX,EAAQkB,OAAOyC,MAAQoU,EAAkB/b,EAAM2I,EAAOY,IAiJpB,CAAC2R,EAAclb,EAAMgE,EAASgG,IAChEqS,OAAQ5a,EAAM0Z,YAvGD,CACbxS,EACAvJ,KAEA,MAAMgc,EAAiCK,EACrCzX,EAAQiV,eAAejZ,GACvB+J,EACAC,GAEIqR,EAA0BiB,GAC9BlB,EACAzS,EACAvJ,GAEF2K,EAAU7J,QAAU6a,EAClBM,EACArR,GAEFhG,EAAQ2U,kBACN3Y,EACAsc,GACA,CACEvD,KAAMpQ,EACNqQ,KAAM5Z,GAER8b,EAAanR,EAAU7J,UACvB,GACA,GAEF4a,EAAU/Q,EAAU7J,UA0Ec,CAACgb,EAAclb,EAAMgE,EAASgG,IAChExB,QAAS/G,EAAM0Z,YAvEf/b,IAIA,MAAMgc,EAAiCL,EAIrCjY,EAAsB1D,GAAmC4K,GAC3DhG,EAAQ2U,kBACN3Y,EACA,IAAMob,EACN,GACAF,EAAaE,IACb,GACA,GAEFN,EAAUM,IAsD0B,CAACF,EAAclb,EAAMgE,EAASgG,IAClEZ,OAAQA,6BEnTVlG,EAA8C,IAE9C,MAAMqZ,EAAe9a,EAAM2B,UAGpBvB,EAAWoC,GAAmBxC,EAAMyC,SAAkC,CAC3EG,SAAS,EACTG,cAAc,EACdF,YAAa,GACb8O,aAAa,EACbC,YAAa,EACb9O,cAAe,GACf+O,cAAc,EACdC,oBAAoB,EACpB9O,SAAS,EACTC,OAAQ,KAGN6X,EAAarc,QACfqc,EAAarc,QAAQ8D,QAAQiD,SAAW/D,EAExCqZ,EAAarc,uCACRgT,GAAkBhQ,KACrBrB,UAAAA,IAIJ,MAAMmC,EAAUuY,EAAarc,QAAQ8D,QAiCrC,OA/BAf,EAAa,CACXO,QAASQ,EAAQc,UAAUC,MAC3BpB,SAAWvE,IACLyF,EAAsBzF,EAAO4E,EAAQlC,iBAAiB,KACxDkC,EAAQG,0CACHH,EAAQG,YACR/E,GAGL6E,mBAAqBD,EAAQG,iBAKnC1C,EAAM4B,UAAU,KACTW,EAAQkD,YAAYH,QACvB/C,EAAQlC,gBAAgB2C,SAAWT,EAAQgQ,eAC3ChQ,EAAQkD,YAAYH,OAAQ,GAE1B/C,EAAQkD,YAAY5B,QACtBtB,EAAQkD,YAAY5B,OAAQ,EAC5BtB,EAAQc,UAAUC,MAAMrB,KAAK,KAE/BM,EAAQiC,qBAGVsW,EAAarc,QAAQ2B,UAAYmD,EAC/BnD,EACAmC,EAAQlC,iBAGHya,EAAarc"}