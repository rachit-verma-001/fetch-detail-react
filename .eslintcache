[{"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/index.js":"1","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/App.js":"2","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/store/auth-context.js":"3","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/pages/AuthPage.js":"4","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/pages/HomePage.js":"5","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/Layout/Layout.js":"6","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/Profile/UserProfile.js":"7","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/ScrappedData/Details.js":"8","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/ScrappedData/EmployeeData.js":"9","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/Layout/MainNavigation.js":"10","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/Profile/ProfileForm.js":"11","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/Auth/AuthForm.js":"12","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/StartingPage/StartingPageContent.js":"13","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/ScrappedData/AddData.js":"14","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/ScrappedData/ExportCsv.js":"15","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/ScrappedData/DropDownFilter.js":"16","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/UI/Card.js":"17","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/store/HostUrl.js":"18"},{"size":352,"mtime":1632221863031,"results":"19","hashOfConfig":"20"},{"size":1192,"mtime":1636724877427,"results":"21","hashOfConfig":"20"},{"size":2296,"mtime":1635418655143,"results":"22","hashOfConfig":"20"},{"size":130,"mtime":1632221863035,"results":"23","hashOfConfig":"20"},{"size":171,"mtime":1632221863035,"results":"24","hashOfConfig":"20"},{"size":246,"mtime":1632221863031,"results":"25","hashOfConfig":"20"},{"size":245,"mtime":1634736243102,"results":"26","hashOfConfig":"20"},{"size":185,"mtime":1636708531458,"results":"27","hashOfConfig":"20"},{"size":7622,"mtime":1637152251752,"results":"28","hashOfConfig":"20"},{"size":2162,"mtime":1634722160320,"results":"29","hashOfConfig":"20"},{"size":2046,"mtime":1637151591214,"results":"30","hashOfConfig":"20"},{"size":4686,"mtime":1637151568702,"results":"31","hashOfConfig":"20"},{"size":231,"mtime":1632484514506,"results":"32","hashOfConfig":"20"},{"size":14876,"mtime":1637152291041,"results":"33","hashOfConfig":"20"},{"size":624,"mtime":1636536614908,"results":"34","hashOfConfig":"20"},{"size":8204,"mtime":1637152022467,"results":"35","hashOfConfig":"20"},{"size":152,"mtime":1632549456718,"results":"36","hashOfConfig":"20"},{"size":110,"mtime":1637148011230,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"lncne1",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/index.js",[],["77","78"],"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/App.js",[],"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/store/auth-context.js",[],"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/pages/AuthPage.js",[],"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/pages/HomePage.js",[],"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/Layout/Layout.js",[],"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/Profile/UserProfile.js",[],"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/ScrappedData/Details.js",[],"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/ScrappedData/EmployeeData.js",[],"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/Layout/MainNavigation.js",[],"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/Profile/ProfileForm.js",[],"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/Auth/AuthForm.js",[],"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/StartingPage/StartingPageContent.js",[],"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/ScrappedData/AddData.js",["79"],"\nimport { useTable, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import { useEffect, useCallback } from 'react';\nimport React, { useState, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@mui/material/Grid';\nimport Box from '@material-ui/core/Box';\nimport Input from '@mui/material/Input';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { useHistory } from \"react-router-dom\";\nimport DatePicker from '@mui/lab/DatePicker';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport TextField from '@mui/material/TextField';\nimport { ngrokUrl } from '../../store/HostUrl';\n\n\n\n\nconst ariaLabel = { 'aria-label': 'description' };\n\n\n// Define a default UI for filtering\nfunction GlobalFilter({\n    preGlobalFilteredRows,\n    globalFilter,\n    setGlobalFilter,\n}) {\n    const count = preGlobalFilteredRows.length\n    const [value, setValue] = React.useState(globalFilter)\n    const onChange = useAsyncDebounce(value => {\n        setGlobalFilter(value || undefined)\n    }, 200)\n\n    return (\n        <span style={{marginLeft:\"13px\"}}>\n            Search:{' '}\n            <input\n            style={{width:\"17%\", marginLeft:\"12px\"}}\n                className=\"form-control\"\n                value={value || \"\"}\n                onChange={e => {\n                    setValue(e.target.value);\n                    onChange(e.target.value);\n                }}\n                placeholder={`${count} records...`}\n            />\n        </span>\n    )\n}\n\nfunction DefaultColumnFilter({\n    column: { filterValue, preFilteredRows, setFilter },\n}) {\n    const count = preFilteredRows.length\n\n    return (\n        <input\n            className=\"form-control\"\n            value={filterValue || ''}\n            onChange={e => {\n                setFilter(e.target.value || undefined)\n            }}\n            placeholder={`Search ${count} records...`}\n        />\n    )\n}\n\nfunction Table({ columns, data }) {\n\n    const defaultColumn = React.useMemo(\n        () => ({\n            // Default Filter UI\n            Filter: DefaultColumnFilter,\n        }),\n        []\n    )\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n        state,\n        preGlobalFilteredRows,\n        setGlobalFilter,\n    } = useTable(\n        {\n            columns,\n            data,\n            defaultColumn,\n        },\n        useFilters,\n        useGlobalFilter\n    )\n\n    return (\n        <div style={{marginTop:\"67px\"}}>\n            <GlobalFilter\n                preGlobalFilteredRows={preGlobalFilteredRows}\n                globalFilter={state.globalFilter}\n                setGlobalFilter={setGlobalFilter}\n            />\n            <table style={{marginTop:\"19px\"}} className=\"table\" {...getTableProps()}>\n                <thead>\n                    {headerGroups.map(headerGroup => (\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map(column => (\n                                <th {...column.getHeaderProps()}>\n                                    {column.render('Header')}\n                                    {/* Render the columns filter UI */}\n                                    <div>{column.canFilter ? column.render('Filter') : null}</div>\n                                </th>\n                            ))}\n                        </tr>\n                    ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                    {rows.map((row, i) => {\n                        prepareRow(row)\n                        return (\n                            <tr {...row.getRowProps()}>\n                                {row.cells.map(cell => {\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                })}\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </table>\n            <br />\n          </div>\n    )\n}\n\n\n\nfunction FilterTableComponent() {\n    const columns = React.useMemo(\n        () => [\n                    {\n                        Header: 'Name',\n                        accessor: 'name',\n                    },\n                    {\n                        Header: 'Type',\n                        accessor: 'company_type'\n                    },\n                   {\n                        Header: 'Url',\n                        accessor: 'url'\n                    },\n                    {\n                        Header: 'Foundation Year',\n                        accessor: 'foundation_year'\n                    },\n                    {\n                        filterable: false,\n                        Header: 'Details',\n                        accessor: 'link',\n                        disableFilters:true,\n                        Cell: ({ row }) =>\n                        <Button variant='outlined'\n                        style={{width:\"146px\"}}\n                        type='submit' sx = {{mt:20}}\n                        name= {row.original.id} onClick={ () => fetchCompanyDetail(row.original.id)}\n                      > Fetch Details</Button>\n                    },\n\n                    {\n                      filterable: false,\n                      disableFilters:true,\n                      Header: 'Sync',\n                      accessor: 'link2',\n                      Cell: ({ row }) =>\n                      <Button variant='outlined'\n                        type='submit' sx = {{mt:20}}\n                        // disabled = {resyncing}\n                        name= {row.original.id} onClick={ () => resyncCompanyDetail(row.original.id)}\n                      >\n                        {/* {resyncing ? \"Resyncing\" : \"Resync\"} */}\n                        Resync\n                        </Button>\n                  },\n                  {\n                    filterable: false,\n                    disableFilters:true,\n                    Header: 'Delete',\n                    accessor: 'link3',\n                    Cell: ({ row }) =>\n                    <Button variant='outlined'\n                    type='submit' sx = {{mt:20}}\n                    name= {row.original.id} onClick={ () => destroyCompanyDetail(row.original.id)}\n                  > Destroy</Button>\n                },\n        ],\n        []\n    )\n\n    // const [isFetched, setIsFetched] = useState(false);\n    const [url, setUrl] = useState('');\n    const [userData, setUserData] = useState([]);\n    const [name, setName] = useState('');\n    const [type, setType] = useState('');\n    const [count, setCount] = useState(0);\n\n    const [value, setValue] = useState(new Date());\n\n    const destroyCompanyDetail = (id) => {\n      const axios = require('axios').default;\n\n      axios.delete(`${ngrokUrl}/api/v1/companies/${id}`, {\n        headers:{\n          'X-USER-TOKEN': localStorage.getItem('token'),\n          \"X-USER-EMAIL\":localStorage.getItem('email')\n        },\n      }).then(function(response){\n        if (response.data.success === true){\n          setCount(count+1);\n          toast.success(\"Delete Sucess\",{\n            position: \"top-right\",\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n          })\n          // const axios = require('axios').default;\n          axios.get(`${ngrokUrl}/api/v1/companies`, {\n            headers:{\n              'X-USER-TOKEN': localStorage.getItem('token'),\n              \"X-USER-EMAIL\":localStorage.getItem('email')\n            }\n          }).then(function(response){\n            if (response.data.success === true){\n              setUserData(response.data.companies);\n            }\n            else{\n          toast.error(response.data.message,  {\n            position: \"top-right\",\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n          });\n            }\n          })\n        }\n        else{\n      toast.error(response.data.message,  {\n        position: \"top-right\",\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      });\n        }\n      })\n    }\n\n    useEffect(() => {\n      const axios = require('axios').default;\n      axios.get(`${ngrokUrl}/api/v1/companies`, {\n        headers:{\n          'X-USER-TOKEN': localStorage.getItem('token'),\n          \"X-USER-EMAIL\":localStorage.getItem('email')\n        }\n      }).then(function(response){\n        if (response.data.success === true){\n          setUserData(response.data.companies);\n        }\n        else{\n      toast.error(response.data.message,  {\n        position: \"top-right\",\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      });\n        }\n      })\n  },[count]);\n\n\n    const switchDetailModeHandler = (event) => {\n      // let sent_url;\n      event.preventDefault();\n      const axios = require('axios').default;\n\n        const headers = {\n          'X-USER-TOKEN': localStorage.getItem('token'),\n          \"X-USER-EMAIL\":localStorage.getItem('email')\n        }\n\n        const data = {\n          name:name,\n          company_type:type,\n          url:url,\n          foundation_year:value\n        }\n\n        axios.post(`${ngrokUrl}/api/v1/companies`,data, {\n            headers: headers\n          }).then(response => {\n          // setIsLoading(false);\n          console.log(\"String\");\n          console.log(response);\n          if (response.data.success === false)\n          {\n            toast.error(response.data.message,  {\n              position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n            });\n          //   setFilterCall(false);\n          //   // alert(response.data.message)\n          }\n          else{\n          setUserData(response.data)\n            axios.get(`${ngrokUrl}/api/v1/companies`, {\n              headers: headers\n            }\n            )\n            .then(function(response){\n              if (response.data.success === true){\n                setUserData(response.data.companies);\n              }\n            })\n\n          // userData.push(response.data.company)\n          // setIsFetched(true);\n          // setFilterCall(false);\n          // setIsFiltered(false);\n          // setShowDetails(true);\n        }\n          // setError(false);\n        }).catch(function (error) {\n          console.log(error);\n          toast.error(\"Something Went Wrong\",  {\n            position: \"top-right\",\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n          })\n        })\n\n\n    };\n\n    const history = useHistory();\n    const fetchCompanyDetail =(id) =>{\n      console.log(id)\n      history.push(`/details/${id}`)\n    }\n    const resyncCompanyDetail = (id) => {\n      const axios = require('axios').default;\n\n      // setResyncing(true);\n\n      axios.get(`${ngrokUrl}/api/v1/resync?company_id=${id}`, {\n        headers:{\n          'X-USER-TOKEN': localStorage.getItem('token'),\n          \"X-USER-EMAIL\":localStorage.getItem('email')\n        },\n      }).then(function(response){\n        if (response.data.success === true){\n          // setResyncing(false);\n          toast.success(\"Resync Sucess\",{\n            position: \"top-right\",\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n          })\n        }\n        else{\n          // setResyncing(false);\n      toast.error(response.data.message,  {\n        position: \"top-right\",\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      });\n        }\n      })\n    }\n\n    return (\n      <section>\n      <Grid container spacing={0} direction=\"column\" alignItems=\"center\" justifyContent=\"center\">\n\n          <form alignItems=\"center\" onSubmit={switchDetailModeHandler} >\n            <div >\n              <Input placeholder=\"Name\" inputProps={ariaLabel} onChange={e => setName(e.target.value)} required style={{width:\"500px\"}}  />\n            </div>\n            <div >\n              <Input placeholder=\"Url\" inputProps={ariaLabel} required onChange={e => setUrl(e.target.value)}   style={{width:\"500px\", marginTop:\"10px\"}}  />\n            </div>\n            <div >\n              <Input placeholder=\"Type\" inputProps={ariaLabel} required onChange={e => setType(e.target.value)}  style={{width:\"500px\", marginTop:\"10px\"}}  />\n            </div>\n\n          <div style = {{marginLeft:\"-17px\"}}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <Box m={2} >\n                <DatePicker\n                  inputFormat=\"yyyy\"\n                  views={['year']}\n                  label=\"Foundation Year\"\n                  minDate={new Date('1900-03-01')}\n                  maxDate={new Date('2023-06-01')}\n                  value={value}\n                  onChange={setValue}\n\n                  renderInput={(params) => <TextField style={{width:\"500px\"}} {...params} helperText={null} />}\n                />\n              </Box>\n            </LocalizationProvider>\n          </div>\n\n            <Grid container spacing={2}>\n              <Grid item>\n                <Box pt={2}>\n                  <Button variant='outlined'\n                      type='submit' sx = {{mt:20}} style = {{width:'217px', position:'absolute', left:'42%'}}\n                      name=\"Fetch\"\n                    >\n                      {/* {showDetails ? 'Hide Details' : 'Fetch Detais'} */}\n                      Add\n                    </Button>\n                </Box>\n              </Grid>\n\n            </Grid>\n          </form>\n          </Grid>\n          <ToastContainer position=\"top-right\"\n          autoClose={5000}\n          hideProgressBar={false}\n          newestOnTop={false}\n          closeOnClick\n          rtl={false}\n          pauseOnFocusLoss\n          draggable\n          pauseOnHover/>\n        {< Table columns={columns} data={userData} />}\n      </section>\n    )\n}\n\nexport default FilterTableComponent;","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/ScrappedData/ExportCsv.js",[],"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/ScrappedData/DropDownFilter.js",["80","81","82","83","84","85","86","87","88","89","90","91","92","93"],"import SearchIcon from '@mui/icons-material/Search';\nimport { useState } from 'react';\nimport InputBase from '@mui/material/InputBase';\nimport { styled, alpha } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport Button from '@mui/material/Button';\nimport { FormControl, InputLabel, Select, MenuItem } from '@mui/material';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Country, State, City } from 'country-state-city';\n\n\n// import { company_name } from './AddData';\nlet company_name = \"\"\nconst Search = styled('div')(({ theme }) => ({\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.common.white, 0.25),\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n        marginLeft: theme.spacing(3),\n        width: 'auto',\n    },\n}));\n\nconst Item = styled(Paper)(({ theme }) => ({\n    ...theme.typography.body2,\n    padding: theme.spacing(0),\n    color: theme.palette.text.secondary,\n}));\n\n\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n}));\n\n\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\n    color: 'inherit',\n    '& .MuiInputBase-input': {\n        padding: theme.spacing(1, 1, 1, 0),\n        paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('md')]: {\n            width: '12ch',\n        },\n    },\n}));\n\nexport let dataFiltered = null;\n\nexport default function DropDownFilter() {\n\n    //   const [firstName, setUserFirstName] = useState();\n    //   const[filteredCompany, setFilteredCompany] = useState();\n    //   const[filterCall, setFilterCall] = useState(false);\n\n    const [company, setCompany] = useState('');\n    const [designation, setDesignation] = useState('')\n    const [state, setState] = useState('')\n    const [country, setCountry] = useState('')\n    const [selectedCountry,setSelectedCountry] = useState('')\n\n    let countryData = Country.getAllCountries()\n    let stateData = State.getAllStates()\n   let selectedCountryStates = State.getStatesOfCountry(country)\n\n\n\n    const handleChange = (event) => {\n        console.log(event.target.name, \"harish\")\n        if (event.target.name == \"Company\") {\n            setCompany(event.target.value);\n\n        } else if (event.target.name == \"Designation\") {\n            setDesignation(event.target.value)\n        } else if (event.target.name == \"State\") {\n            setState(event.target.value)\n        } else if (event.target.name == \"Country\") {\n            setCountry(event.target.value)\n        }\n\n\n\n    };\n\n    //   const handleDesignationChange = (event) => {\n    //     setDesignation(event.target.value);\n    //   };\n\n    //   const handleStateCompanyChange = (event) => {\n    //     setState(event.target.value);\n    //   };\n\n    //   const handlecountryCompanyChange = (event) => {\n    //     setCountry(event.target.value);\n    //   };\n\n\n    //   const firstNameChangeHandler = (event) => {\n    //     setUserFirstName(event.target.value);\n    //   };\n\n    //   const [lastName, setUserLastName] = useState();\n\n    //   const lastNameChangeHandler = (event) => {\n    //     setUserLastName(event.target.value);\n    //   };\n\n    //   const [email, setUserEmail] = useState();\n\n    //   const emailChangeHandler = (event) => {\n    //     setUserEmail(event.target.value);\n    //   };\n\n    //   const [city, setUserCity] = useState();\n\n    //   const cityChangeHandler = (event) => {\n    //     setUserCity(event.target.value);\n    //   };\n\n    //   const [designation, setUserDesignation] = useState();\n\n    //   const designationChangeHandler = (event) => {\n    //     setUserDesignation(event.target.value);\n    //   };\n\n\n\n\n\n    return (<>\n\n        <Grid container spacing={2}>\n            <Grid item xs={6}>\n                <Item>\n                    <FormControl fullWidth>\n                        <InputLabel id=\"demo-simple-select-label\">Company</InputLabel>\n                        <Select\n                            labelId=\"demo-simple-select-label\"\n                            id=\"demo-simple-select\"\n                            value={company}\n                            label=\"Company\"\n                            name=\"Company\"\n\n                            onChange={handleChange}\n                        >\n                            <MenuItem value={10}>Prtons</MenuItem>\n                            <MenuItem value={20}>Postman</MenuItem>\n                            <MenuItem value={30}>Adobe</MenuItem>\n                        </Select>\n                    </FormControl>\n                </Item>\n            </Grid>\n\n            <Grid item xs={6}>\n                <Item>\n                    <FormControl fullWidth>\n                        <InputLabel id=\"Designation\">Designation</InputLabel>\n                        <Select\n                            labelId=\"Designation\"\n                            id=\"demo-designation\"\n                            value={designation}\n                            label=\"Designation\"\n                            name=\"Designation\"\n                            onChange={handleChange}\n                        >\n                            <MenuItem value={10}>HR</MenuItem>\n                            <MenuItem value={20}>CEO</MenuItem>\n                            <MenuItem value={30}>CXO</MenuItem>\n                            <MenuItem value={30}>CTO</MenuItem>\n                            <MenuItem value={30}>EMPLOYEES</MenuItem>\n                        </Select>\n                    </FormControl>\n                </Item>\n            </Grid>\n\n\n            <Grid item xs={6}>\n                <Item>\n                    <FormControl fullWidth>\n                        <InputLabel id=\"Country\">Country</InputLabel>\n                        <Select\n                            labelId=\"Country\"\n                            id=\"demo-Country\"\n                            value={country}\n                            label=\"country\"\n                            name=\"Country\"\n                            onChange={handleChange}\n                        >\n                            {countryData.map(count => {\n                                // console.log(count.isoCode)\n                                return <MenuItem value={count.isoCode}>{count.name}</MenuItem>\n\n\n                            })}\n\n                        </Select>\n                    </FormControl>\n                </Item>\n            </Grid>\n\n            <Grid item xs={6}>\n                <Item>\n                    <FormControl fullWidth>\n                        <InputLabel id=\"State\">State</InputLabel>\n                        <Select\n                            labelId=\"State\"\n                            id=\"demo-state\"\n                            value={state}\n                            label=\"state\"\n                            name=\"State\"\n                            onChange={handleChange}\n                        >\n                            {selectedCountryStates.map(IndivState=>{\n\n                            return <MenuItem value={10}>{IndivState.name}</MenuItem>\n\n                            })}\n\n\n                        </Select>\n                    </FormControl>\n                </Item>\n            </Grid>\n\n\n\n\n\n\n        </Grid>\n\n        <Grid item mt={2} container spacing={0} direction=\"column\" alignItems=\"center\" justifyContent=\"center\" >\n            <Button variant=\"contained\" style={{ width: '240px' }}>Filter</Button>\n        </Grid>\n        <ToastContainer position=\"top-right\"\n            autoClose={5000}\n            hideProgressBar={false}\n            newestOnTop={false}\n            closeOnClick\n            rtl={false}\n            pauseOnFocusLoss\n            draggable\n            pauseOnHover />\n\n    </>\n    )\n}","/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/components/UI/Card.js",[],"/home/rachit/Things/WebScrapping/ReactBranches/09-finished MaterialUI/src/store/HostUrl.js",[],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":200,"column":9,"nodeType":"100","endLine":200,"endColumn":11,"suggestions":"101"},{"ruleId":"102","severity":1,"message":"103","line":1,"column":8,"nodeType":"104","messageId":"105","endLine":1,"endColumn":18},{"ruleId":"102","severity":1,"message":"106","line":10,"column":26,"nodeType":"104","messageId":"105","endLine":10,"endColumn":31},{"ruleId":"102","severity":1,"message":"107","line":12,"column":26,"nodeType":"104","messageId":"105","endLine":12,"endColumn":30},{"ruleId":"102","severity":1,"message":"108","line":16,"column":5,"nodeType":"104","messageId":"105","endLine":16,"endColumn":17},{"ruleId":"102","severity":1,"message":"109","line":17,"column":7,"nodeType":"104","messageId":"105","endLine":17,"endColumn":13},{"ruleId":"102","severity":1,"message":"110","line":40,"column":7,"nodeType":"104","messageId":"105","endLine":40,"endColumn":24},{"ruleId":"102","severity":1,"message":"111","line":51,"column":7,"nodeType":"104","messageId":"105","endLine":51,"endColumn":22},{"ruleId":"102","severity":1,"message":"112","line":76,"column":12,"nodeType":"104","messageId":"105","endLine":76,"endColumn":27},{"ruleId":"102","severity":1,"message":"113","line":76,"column":28,"nodeType":"104","messageId":"105","endLine":76,"endColumn":46},{"ruleId":"102","severity":1,"message":"114","line":79,"column":9,"nodeType":"104","messageId":"105","endLine":79,"endColumn":18},{"ruleId":"115","severity":1,"message":"116","line":86,"column":31,"nodeType":"117","messageId":"118","endLine":86,"endColumn":33},{"ruleId":"115","severity":1,"message":"116","line":89,"column":38,"nodeType":"117","messageId":"118","endLine":89,"endColumn":40},{"ruleId":"115","severity":1,"message":"116","line":91,"column":38,"nodeType":"117","messageId":"118","endLine":91,"endColumn":40},{"ruleId":"115","severity":1,"message":"116","line":93,"column":38,"nodeType":"117","messageId":"118","endLine":93,"endColumn":40},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"react-hooks/exhaustive-deps","React Hook React.useMemo has missing dependencies: 'destroyCompanyDetail' and 'fetchCompanyDetail'. Either include them or remove the dependency array.","ArrayExpression",["121"],"no-unused-vars","'SearchIcon' is defined but never used.","Identifier","unusedVar","'toast' is defined but never used.","'City' is defined but never used.","'company_name' is assigned a value but never used.","'Search' is assigned a value but never used.","'SearchIconWrapper' is assigned a value but never used.","'StyledInputBase' is assigned a value but never used.","'selectedCountry' is assigned a value but never used.","'setSelectedCountry' is assigned a value but never used.","'stateData' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"122","fix":"123"},"Update the dependencies array to be: [destroyCompanyDetail, fetchCompanyDetail]",{"range":"124","text":"125"},[6608,6610],"[destroyCompanyDetail, fetchCompanyDetail]"]